//Explaination for the polynomial regression using Acumen 3D rendering
//
// Author: Emmanuel Brelle

#include "../polynoms.acm"
#include "../TextPlotter.Acm"

model Main (simulator) = 
initially
t=0,t'=0, 
step =0, phase ="wait",
topLeft = ((-3.2,0,5),(-2,0,7),(-2,0,7),(-2,0,7),(-2,0,7),
            (-2,0,7),(-2,0,5.5),(-2,0,7.5),(-2,0,7.5),(-2,0,7.5),
            (-2,0,6)),

phaseDuration = (4, 27,21,10, 13, 28, 10),
nextPhaseStart = (4, 6,11,10, 13, 28, 10),

titleFontSize =1,
textFontSize = 0.5,
_3DView =((5.5,-27,3.5),(4.5,0,4.5))
always 
t'=1,
simulator.endTime += -0.1+ sum nextPhaseStart(i) for i in 0:6,
if t > nextPhaseStart(step) then 
  t+=0,
  step += step +1,
  phase +="wait" 
noelse,

if  phase == "wait" then  phase +="run",
match step with [
0 -> 
  //create PolynomilaRegression(1,1,0),
  create TimedText ("K-th Ordrer Polynomial Regression",titleFontSize,topLeft(step),0,phaseDuration(step),blue),
  create TimedText ("by Emmanuel Brelle",textFontSize,topLeft(step)+(5.5,0,-textFontSize-titleFontSize),0,phaseDuration(step),blue)

| 1 ->
  create TimedText ("This video illustrates a 4th ordrer polynomial regression", textFontSize,topLeft(step),0,phaseDuration(step),blue),
  create TimedText ("on an input made of 5 couples (xi,yi)", textFontSize,topLeft(step)+(0,0,-textFontSize),0,phaseDuration(step),blue)
| 2 ->
  create TimedText ("Polynomial regression tries to find the coefficients", textFontSize,topLeft(step)+(0,0,-3*textFontSize),0,phaseDuration(step),blue),
  create TimedText ("C = [c0,c1,c2,c3,c4] of a 4th ordrer polynom", textFontSize,topLeft(step)+(0,0,-4*textFontSize),0,phaseDuration(step),blue),
  create TimedText ("which is the closest as possible to any input points", textFontSize,topLeft(step)+(0,0,-5*textFontSize),0,phaseDuration(step),blue)
| 3 ->
  create TimedText ("For each input (xi,yi), the error C.Xi-yi must be", textFontSize,topLeft(step)+(0,0,-7*textFontSize),0,phaseDuration(step),blue),
  create TimedText ("as small as possible (with Xi = [1,xi,xi^2,xi^3,xi^4] )", textFontSize,topLeft(step)+(0,0,-8*textFontSize),0,phaseDuration(step),blue)

| 4 ->
  create TimedText ("It can be mathematically proved that C = inv(Xt.X).Xt.Y", textFontSize,topLeft(step),0,phaseDuration(step),blue),
  create TimedText ("where X is the matrix of all the 'Xi's", textFontSize,topLeft(step)+(0.7,0,-2*textFontSize),0,phaseDuration(step),blue),
  create TimedText ("Y is the matrix of all the 'yi's", textFontSize,topLeft(step)+(0.7,0,-3*textFontSize),0,phaseDuration(step),blue),
  create TimedText ("Xt is the transposed matrix of X", textFontSize,topLeft(step)+(0.7,0,-4*textFontSize),0,phaseDuration(step),blue)

| 5 ->
  create PolynomilaRegression(8,17,3),
  create TimedText ("Each input (xi,yi) is represented by a cross", textFontSize,topLeft(step),0,phaseDuration(step),blue),
  create TimedText ("the black line is the polynom",textFontSize,topLeft(step)+(0,0,-textFontSize),0,phaseDuration(step),blue),
  create TimedText ("The error is the norm of CX-Y", textFontSize,topLeft(step)+(0,0,-4*textFontSize),0,phaseDuration(step),blue)
| 6 ->
   create TimedText ("Thank you for watching!", titleFontSize,topLeft(step)+(1,0,0),0,phaseDuration(step),blue),
    create TimedText ("The Effective Modeling Group", textFontSize,topLeft(step)+(3,0,-titleFontSize-textFontSize),0,phaseDuration(step),blue),
    create TimedText ("(effective-modeling.org)",textFontSize,topLeft(step)+(3.5,0,-titleFontSize-textFontSize*3),0,phaseDuration(step),blue)
]
 noelse

model PolynomilaRegression (tPauseBefore,tEnd,tPauseAfter)=
initially
n = 4, mode = 1, 
t = -tPauseBefore , t'=1,
x = (0:4,0:4,0:4,0:4,0:4), y=(-0.8,0.7,0,0.5,0),
coef = (0,0,0,0,0), error= 0,
bSize = 0.3,
_3D = (),position = (2,0,2.5),
poly= create polynom((0,0,0,0,0),4,black,3,(-2,7),0.05,(0,0,0),-1,5)
always
t'=1,
if (t>0)then
coef =y*x*inv(trans(x)*x)
noelse,

 if (t> 0 && t< tEnd) then
y(0) = -0.8,
y(1) = 0.7*cos(t/2),
y(2) = 0.7*sin(t/2),
y(3) = 0.5,
y(4) = -0.5*sin(t/2)
noelse,

if(length(children)>0) then 
poly.coef = coef,
poly.origin+=position
noelse,

if mode == 1 then 
foreach i in 0:n do 
x(i) += (1,i,i*i,i*i*i,i*i*i*i),
mode += mode-1
noelse ,

if(t>=tEnd+tPauseAfter)then 
  if(mode == 0 ) then
    foreach c in children do 
      if c.toEnd == 0 then 
      c.toEnd += 1
      noelse,
    mode += mode -1
  else if(mode == -1 ) then
    foreach c in children do 
     if c.toEnd == 2 then 
       terminate c
     noelse,
     if length(children) <= 0 then 
       terminate self
     noelse
  noelse
noelse
,

error = norm(coef*trans(x)-y),
_3D =( 
    Text content=format("error = %.2g",error) center=position+(0.5,0,-2) size = 0.5  color= black,

  Cylinder length=bSize*3 radius=bSize*0.2 rotation=(pi/2,0,0) center=position+(x(0,1),0,y(0)) color=blue,
  Cylinder length=bSize*3 radius=bSize*0.2 rotation=(0,0,pi/2) center=position+(x(0,1),0,y(0)) color=blue,

  Cylinder length=bSize*3 radius=bSize*0.2 rotation=(pi/2,0,0) center=position+(x(1,1),0,y(1)) color=red,
  Cylinder length=bSize*3 radius=bSize*0.2 rotation=(0,0,pi/2) center=position+(x(1,1),0,y(1)) color=red,

  Cylinder length=bSize*3 radius=bSize*0.2 rotation=(pi/2,0,0) center=position+(x(2,1),0,y(2)) color=green,
  Cylinder length=bSize*3 radius=bSize*0.2 rotation=(0,0,pi/2) center=position+(x(2,1),0,y(2)) color=green,
  
  Cylinder length=bSize*3 radius=bSize*0.2 rotation=(pi/2,0,0) center=position+(x(3,1),0,y(3)) color=green,
  Cylinder length=bSize*3 radius=bSize*0.2 rotation=(0,0,pi/2) center=position+(x(3,1),0,y(3)) color=green,

  Cylinder length=bSize*3 radius=bSize*0.2 rotation=(pi/2,0,0) center=position+(x(4,1),0,y(4)) color=yellow,
  Cylinder length=bSize*3 radius=bSize*0.2 rotation=(0,0,pi/2) center=position+(x(4,1),0,y(4)) color=yellow

)