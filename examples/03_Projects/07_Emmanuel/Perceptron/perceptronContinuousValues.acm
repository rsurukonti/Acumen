// Perceptron for discrete continuous output
//
// Author: Emmanuel Brelle
//
// This is the implementation of a perceptron to determine the shade of grey
//of any point of the plane. The cubes give the results for differents point
//in space. The coefficent are the weights in the perceptrons according to the 
// dimensional value of the points (colors match the axes)

model Main (_)=
initially
n= 3,
var = (
  (0,1,0),
  (0,1,1),
  (1,1,0.5),
  (1,1,1)
  ),
goals = ((0),(0.5),(0.7),(1)),
weights = ((0),(0),(0)),
alpha= 0.1, // learning coefficient
error = ((0),(0),(0),(0)),

_3D=(),colors = (black,black,black,black,black,black,black),
_3DView=((0,-6,0.7),(0.5,0.5,0.3)),
test = (0,1,0), testValue=-1, testColor = (0.4,0.4,0.4),
t=0,t'=1,t2=0,t2'=1

always 
t'=4,t2'=1,

testValue =( test*weights)(0),

if testValue >= 0.5 then testColor = black 
else  testColor = white,
test= 1/2*(cos(t/2),0,sin(t)) +(0.5,1,0.5),

error = goals - var * weights,
if t2 > 0.05 then t2+= 0,
  weights += weights + alpha * trans(var) * error
noelse,


foreach i in 0:n do 
 if goals(i,0)== 1 
 then colors(i)+= black 
 else  colors(i)+= white,
_3D=(
  Sphere center=var(0) color=goals(0,0)*white,
  Sphere center=var(1) color=goals(1,0)*white,
  Sphere center=var(2) color=goals(2,0)*white,
  Sphere center=var(3) color=goals(3,0)*white,
  
  Text center=(-0.3,0,-0.4) content = format("%.2f",weights(0,0)) color=red ,
  Text center=(0.9,0,-0.4) content = format("%.2f",weights(1,0)) color = green ,
  Text center=(0.3,0,-0.4) content = format("%.2f",weights(2,0)) color = blue,
  Text center=(-0.3,0,-0.4) content = format("%.2f",weights(0,0)) color=red ,
  Text center=(0.9,0,-0.4) content = format("%.2f",weights(1,0)) color = green ,
  Text center=(0.3,0,-0.4) content = format("%.2f",weights(2,0)) color = blue,
  
  Box size =(0.3,0.3,0.3) center=test color=testValue*white
  )