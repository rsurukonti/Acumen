//Explaination for the Upper Confidence Bound algorithm using Acumen
//
// Author: Emmanuel Brelle

#include "../TextPlotter.Acm"

model Main (simulator) = 
initially
t=0,t'=0, 
step =0, phase ="wait",
topLeft = ((-0,0,5),(-2,0,7),(-2,0,7),(-2,0,7),(-2,0,7),
         (-2,0,7),(-2,0,7),(-2,0,8),(-2,0,8),(-2,0,8),
         (-2,0,8),(-2,0,8),(-2,0,7),(-2,0,6),(-2,0,6),
         (-2,0,7),(-2,0,7), (-2,0,6)),
phaseDuration = (4, 13,9,4,  21,15,8,  58,53,46,41,34, 12, 10),
nextPhaseStart = (4, 4,5,4,  6,7,8,  5,7,5,7,34, 12, 10),
titleFontSize =1,
subTitleFontSize = 0.5,
textFontSize = 0.5,
_3DView = ((5.5,-32,3.5),(4.5,0,4.5))
always 
t'=1,
simulator.endTime += -0.01 + sum nextPhaseStart(i) for i in 0:13 ,
if t > nextPhaseStart(step) then 
  t+=0,
  step += step +1,
  phase +="wait" 
noelse,

if  phase == "wait" then     phase +="run",
match step with [
0 -> 
//create solver(0,5,20,0),
    create TimedText ("The N-Armed Bandit",titleFontSize,topLeft(step),0,phaseDuration(step),blue),
    create TimedText ("by Emmanuel Brelle",subTitleFontSize,topLeft(step)+(2.8,0,-titleFontSize-textFontSize),0,phaseDuration(step),blue)
| 1 ->
create TimedText ("This video illustrates the upper-confidence-bound algorithm",textFontSize,topLeft(step),nextPhaseStart(step),phaseDuration(step),blue),
create TimedText ("for the multi-armed bandit decision problem", textFontSize,topLeft(step)+(0,0,-textFontSize*1),nextPhaseStart(step),phaseDuration(step),blue)
| 2 ->
create TimedText ("It takes as input 4 different random generators (the bandits",textFontSize,topLeft(step)+(0,0,-textFontSize*3),nextPhaseStart(step),phaseDuration(step),blue),
create TimedText ("with N=4)",textFontSize,topLeft(step)+(0,0,-textFontSize*4),nextPhaseStart(step),phaseDuration(step),blue)
| 3 ->
create TimedText ("The goal is to maximize the reward during an exploration",textFontSize,topLeft(step)+(0,0,-textFontSize*6),nextPhaseStart(step),phaseDuration(step),blue),
create TimedText ("phase", textFontSize,topLeft(step)+(0,0,-textFontSize*7),nextPhaseStart(step),phaseDuration(step),blue)

| 4 ->
create TimedText ("The algorithm gives for each bandit a confidence interval",textFontSize,topLeft(step)+(0,0,0),nextPhaseStart(step),phaseDuration(step),blue),
create TimedText ("of the expected value",textFontSize,topLeft(step)+(0,0,-textFontSize*1),nextPhaseStart(step),phaseDuration(step),blue)
| 5 ->
create TimedText ("Interval size and the center depends respectively on the ",textFontSize,topLeft(step)+(0,0,-textFontSize*3),nextPhaseStart(step),phaseDuration(step),blue),
create TimedText ("number of tries and on the average of the previous results", textFontSize,topLeft(step)+(0,0,-textFontSize*4),nextPhaseStart(step),phaseDuration(step),blue)
| 6 ->
create TimedText ("The algorithm wants to maximize the average value play ",textFontSize,topLeft(step)+(0,0,-textFontSize*6),nextPhaseStart(step),phaseDuration(step),blue),
create TimedText ("so it picks the bandit with the highest upper bound", textFontSize,topLeft(step)+(0,0,-textFontSize*7),nextPhaseStart(step),phaseDuration(step),blue)

| 7 ->
create solver(23,7,37,10),
create Arrow (1,(-3.2,0,0.6),(pi/2,0.5*pi,0),nextPhaseStart(step),white),
create TimedText ("The background turns green when the bandit is played",textFontSize,topLeft(step),nextPhaseStart(step),phaseDuration(step),blue)
| 8 ->
create Arrow (1,(-3,0,1.4),(pi/2,0.5*pi,0),nextPhaseStart(step),red),
create TimedText ("For each bandit:", textFontSize,topLeft(step)+(0,0,-textFontSize*2),0,phaseDuration(step),blue),
create TimedText ("The red line is the expected value", textFontSize,topLeft(step)+(0,0,-textFontSize*3),nextPhaseStart(step),phaseDuration(step),blue)
| 9 ->
create Arrow (1,(-2.5,0,1.8),(pi/2,0.5*pi,0),nextPhaseStart(step),(0,0.9,1)),
create TimedText ("The light blue line is the measured average",textFontSize,topLeft(step)+(0,0,-textFontSize*4),nextPhaseStart(step),phaseDuration(step),blue)
| 10 ->

create Arrow (1,(-2.5,0,2.4),(pi/2,0.5*pi,0),nextPhaseStart(step),blue),
create TimedText ("The blue bar is the confidence interval", textFontSize,topLeft(step)+(0,0,-textFontSize*5),nextPhaseStart(step),phaseDuration(step),blue)
| 11 ->
create TimedText ("The results are white lines",textFontSize,topLeft(step)+(0,0,-textFontSize*6),nextPhaseStart(step),phaseDuration(step),blue)
| 12 ->
create TimedText ("As you can see, the bandits with higher expected value",textFontSize,topLeft(step),nextPhaseStart(step),phaseDuration(step),blue),
create TimedText ("are played more.",textFontSize,topLeft(step)+(0,0,-textFontSize*1),nextPhaseStart(step),phaseDuration(step),blue)
| 13 ->
create TimedText ("Thank you for watching!", titleFontSize,topLeft(step)+(1,0,0),0,phaseDuration(step),blue),
    create TimedText ("The Effective Modeling Group", textFontSize,topLeft(step)+(3,0,-3),0,phaseDuration(step),blue),
    create TimedText ("(effective-modeling.org)",textFontSize,topLeft(step)+(3.5,0,-4),0,phaseDuration(step),blue)
]
 noelse

model solver(tPauseBefore,tPauseFirstPlay, tEnd, tPauseAfter)=
initially
size=2,  position=(-0.9,0,1.8), space=1.8,
mode = "ini", nbPlayed= 0, tPauseFirstPlay'=0,
max= (0,0,0),
t= 0,t'=1,banditLatency = 0.7,tStep = 2, // steps duration
t0= -tPauseBefore,t0'= 1, // absolute time
ptr = 4, max =0,imax = 0,prev_imax = -1, //optimal value for the last step 
_3D =()
always
//t0'= 1, t'= 0.2,
t0'= 1, t'= 1,
if mode == "ini" then
    create ArmedBandit(0,0.3,size,position,space),
    create ArmedBandit(1,0.7,size,position,space),
    create ArmedBandit(2,0.6,size,position,space),
    create ArmedBandit(3,0.8,size,position,space),
  mode += "running"
noelse,
if t0 > tEnd+tPauseAfter then 
  foreach c in children do if c.mode == "run" then c.mode += "end" noelse,
    mode += "end"
noelse,
 if mode == "end" then 
    terminate self
  noelse,

if (nbPlayed==1) then tPauseFirstPlay'=-1
else tPauseFirstPlay'=0, 

if t0>0 && t0<tEnd && not(nbPlayed == 1 && tPauseFirstPlay >0) then 
  //play the selected bandit and set the colors for diamonds
  if ptr >= length(children) then
    ptr +=0,imax +=0, prev_imax += imax, max +=0, t+= 0,
    nbPlayed += nbPlayed+1,
    foreach c in children do (
      //Select the bandit
      if c.id == imax then
        //play the bandit
        if c.prob <0.5 then 
          c.lastTry += rand()*(2*c.prob)
        else
          c.lastTry += c.prob + 2*(rand()-0.5)*(1-c.prob),
        c.tTry +=banditLatency
        noelse,
        //Update the colors
        if imax<> prev_imax then
          if c.id == imax  then
            c.diamondColor += green
          else if c.id == prev_imax then
            c.diamondColor += white
        noelse
      noelse
    )
  else
  //find the max among the children
  if t > tStep then
    ptr+=ptr +1,
    foreach c in children do 
      if (ptr == c.id && c.upperBound > max) then
        max += c.upperBound,
        imax += ptr    
      noelse
  noelse
noelse

model ArmedBandit (id,prob,size,position,space) = 
initially
mode="run",
upperBound = 1 , average = 0.5, numberOfRun = 0,
confidenceConst = sqrt(log(2/0.1)/2),  confidence = sqrt(log(2/0.1)/2),
tTry =0, tTry'=0,
lastTry = -1,

diamondColor = white, valueBarColor=(0,0.9,1),
distBarBandit=0.15,
bodySize=(0.8,0.3,0.9),
_3D =()
always 

if mode=="end" then
foreach c in children do 
terminate c,
mode+="terminate"
else if mode=="terminate"then 
terminate self
noelse,

upperBound =average +confidence,

if prob < 0 then 
prob += rand() 
noelse,

if tTry < 0 then
tTry+=0,tTry'=0,
confidence= confidenceConst/sqrt(numberOfRun),
average += (average *numberOfRun + lastTry)/ (numberOfRun +1),
create mark(position+size*(id*space,0,lastTry-0.5), size,1.2*(bodySize(0),bodySize(1),0.03)),
numberOfRun+=numberOfRun+1
else if tTry > 0 then
tTry'=-1
else 
tTry'=0
,

_3D=( 
  Box color=diamondColor size=(size*space,0.1,3) center=position+size*(id*space,bodySize(1)/2,0),
  
  Box color=red size=size*(space*0.7,1.1*bodySize(1),0.05) center=position+size*(id*space,0,prob-0.5), // Expected value
  Box color=valueBarColor size=1.15*size*(bodySize(0),bodySize(1),0.05) center=position+size*(id*space,0,average-0.5), // Average value
  
  Box color=blue center=position+size*(id*space,0,average-0.5) size=size*(bodySize(0),bodySize(1),confidence) //confidence bars
  //Box color=black center=position+size*(id*space,0,0) size=size*(0.1,0.1,confidenceConst) //fixed references bars
)

model mark(pos,scale,size)=initially
_3D=()
always
_3D=(Box center=pos size =scale*size color=white)
