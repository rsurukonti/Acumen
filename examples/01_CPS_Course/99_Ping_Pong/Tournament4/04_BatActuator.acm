/**
* Actuators for moving the bat, which also keeps track of the energy spent.
**/

model BatActuator (n,p1,tablerow,tablecolum,maxE) =
initially
  mode     =  "Normal",
  p        =  p1,
  p'       =  (0,0,0),
  p''      =  (0,0,0),
  angle    =  (0,0,0),
  energy   =  0,
  energy'  =  0,
  m        =  0.1,      // Mass of the bat
  F        =  0,
  v        =  (0,0,0),
  offset   =  0,
  // Visualize energy spent
  eb       =  create Cylinder((0,0,0),tablerow,tablecolum,true),
  link1    =  create Cylinder((0,0,0),tablerow,tablecolum,false),
  link2    =  create Cylinder((0,0,0),tablerow,tablecolum,false),
  L1       =  0.4,      // Length of link1 is fixed
  baseP    =  (2.4*(-1)^n,0,0.3),
  unit     =  (0,0,0),  // Unit vector from baseP to P
  r        =  norm((1.6,0.1,0.2)) ,
  r'       =  0 ,                     r''      =  0 ,
  alpha    =  acos(0.2/norm((1.6,0.1,0.2))) ,
  alpha'   =  0 ,                     alpha''  =  0 ,
  theta    =  atan(1.6*(-1)^n/0.1) ,
  theta'   =  0 ,                     theta''  =  0,
  k        =  0,
  k'       =  1
always
  k' = 1,
  // If mode is not valid then make mode "Panic!"
  if mode <> "Normal" && mode <> "Reset" then
    mode + = "Panic!" 
  noelse,
  match mode with [
    "Normal" ->
      F = m * norm(p''),
      if norm(p') > 5 && k >= 0.01 then // ???Saturate??? speeds over 5
        p' + = p'/norm(p') * 5,
        k = 0
      noelse,
      energy' = F * norm(p'), // Simplistic model of power consumed
      // Transformation from Spherical coordinate to Cartesian coordinate system
      if energy < maxE then 
        p''   = let sast = sin(alpha)*sin(theta) ,
                    sact = sin(alpha)*cos(theta) ,
                    cast = cos(alpha)*sin(theta) ,
                    cact = cos(alpha)*cos(theta) ,
             in
             (sast*r'' - sast*r*theta'^2 + sact*r*theta'' + 2*cast*alpha'*r' + 2*sact*r'*theta' - sast*r*alpha'^2 + cast*r*alpha''+2*cact*r*alpha'*theta',
              sact*r'' - sast*r*theta'' + 2*cact*alpha'*r' - 2*sast*r'*theta' - sact*r*alpha'^2 + cact*r*alpha'' - sact*r*theta'^2 - 2*cast*r*alpha'*theta',
              cos(alpha)*r'' - 2*sin(alpha)*alpha'*r' - cos(alpha)*r*alpha'^2 - sin(alpha)*r*alpha'')
      else p'' =(0,0,0),
      // Visualize arm
      unit    = (p - baseP)/norm(p - baseP),
      link1.q = baseP,
      link1.p = baseP + L1 * unit,
      link1.r = 0.1,
      link2.q = link1.p,
      link2.p = p +  ((-1)^n * 0.05,0,0),
      link2.r = 0.03
  | "Reset" ->
      p       + = p1 ,
      p'      + = (0,0,0) ,
      p''     + = (0,0,0) ,
      angle   + = (0,0,0) ,
      r       + = norm((1.6,0.1,0.2)) ,
      r'      + = 0 ,                     r''     + = 0 ,
      alpha   + = acos(0.2/norm((1.6,0.1,0.2))) , 
      alpha'  + = 0 ,                     alpha'' + = 0 ,
      theta   + = atan(1.6*(-1)^n/0.1) , 
      theta'  + = 0 ,                     theta'' + = 0 ,
      mode    + = "Normal" 
  | "Panic!" -> ],
  
  // Energy bar visualization
  offset  = ((maxE-energy)/maxE)*3.8,
  eb.p    = ((-1)^n * 4.5, 0, -1.5),
  eb.q    = ((-1)^n * 4.5, 0, -1.5 + offset),
  eb.r    = 0.075,
  if n == 1 then
    eb.col = red
  else
    eb.col = black
