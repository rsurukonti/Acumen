// Two dimensional
// Authors: Walid Taha, Henrik Eriksson, and Adam Duraz
// 2014/09/30

model Main(simulator) =
initially
  t = -2, t' = 1,
  m1 = 20000, x1 = 0, x1' = 0, x1'' = 0, y1 = -100, y1' = 12, y1'' = 0,
  pba1  =  -3,  // Pre-brake deceleration,     3 m/s2
  ttcpb =   1,  // Pre-brake ttc threshold,    1 s
  fba1  =  -6,  // Full-brake deceleration,    6 m/s2
  ttcfb = 0.5,  // Full-brake ttc threshold, 0.5 s
  m2 = 1500, x2 = 6, x2' = 0, y2 = 0, y2' = 0, y2'' = 0,
  state = "1-Approach",
  radius = 2,
  dr = 50,
  //collision_radius =0.1,
  //braking_acceleration=-5,
  c = 0.5,
  collision_delta_v1 = 0,
  collision_delta_v2 = 0,
  pcb      = -100, // Post-collision braking, m/s2
  vdiff    = 12,
  epsilon  = 0.01,
  distance = sqrt(((0-3)*(0-6))+((-100-0)*(-100-0))),
  _3D = (),
  _3DView = ()
always
    _3D = (Sphere                 // Type of _3D object
           center = (x2,y2,0)     // Center point in [x,y,z] form
           size = 0.05            // Radius
           color = red            // Color
           rotation = (0,0,0) ,   // Orientation
           Sphere                 // Type of _3D object
           center = (x1,y1,0)     // Center point in [x,y,z] form
           size = 0.05            // Radius
           color = blue           // Color
           rotation = (0,0,0),    // Orientation
           Cylinder               // Type of _3D object
           center = (x1,y1,0)     // Center point
           radius = 0.3           // Size (radius)
           length = 0.01          // Size (length)
           color = yellow         // Color
           rotation = (pi/2,0,0), // Orientation
           Text                   // Type of _3D object
           center = (-2.2,y2,-1)  // Starting point in [x,y,z] form
           size = 0.75            // Font size
           color = yellow         // Color in red-green-blue (RGB) intensity
           rotation = (0,0,0)     // Orientation (pi/2 around x-axis)
           content = state),      // Text you wish to display
    t' = 1,
    distance = sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2))),
    vdiff    = abs(y1'-y2'),

    if state == "4-Sense" || t > 4 then
      _3DView = ((x1-1,y1-7,2), (x1,y1+1,0))
    else
      _3DView = ((-3,-8,5), (0.5,3,-1)),
     
    match state with 
    [ "1-Approach" ->
        x1' = 0, y1' = 12,
        x2 = radius*(1-t),
        y2 = 0,
        if t>0 then state+ = "2-Approach" noelse
    | "2-Approach" ->
        x1' = 0, y1' = 12,
        x2 = radius*(1-sin(t)),
        y2 = radius*(1-cos(t)),
        if y2>radius then state+ = "3-Approach", t+ = 0 noelse
    | "3-Approach" ->
        x1' = 0, y1' = 12,
        x2 = 0,
        y2 = radius*(1+t),
        if y1+dr>y2 then state+ = "4-Sense" noelse
    | "4-Sense" ->
        x1' = 0,
        x2' = 0,
        y1'' = 0, 
        y2' = 3,
        // Activating Pre-braking
        if (abs(y1'-y2') > epsilon && (y2-y1)<ttcpb*(y1'-y2')) then state+ = "5-Pre-Brake" noelse
    | "5-Pre-Brake" ->
        x1' = 0,
        x2' = 0,
        if (y1'>0) then y1'' = pba1 else y1' = 0, 
        y2'' = 0,
        // Activating Full Braking
        if (abs(y1'-y2') > epsilon && (y2-y1)<ttcfb*(y1'-y2')) then state+ = "6-Brake" noelse
    | "6-Brake" ->
        x1' = 0,
        x2' = 0,
        if y1'>0 then y1'' = fba1 else y1' = 0, 
        y2'' = 0,
        // Collision Detection
        if y1>y2 then state+ = "7-Collision" noelse
    | "7-Collision" ->
        y1'+ = (m1*y1' + m2*y2' + m2*c*(y2'-y1'))/(m1 + m2),
        y2'+ = (m1*y1' + m2*y2' + m1*c*(y1'-y2'))/(m1 + m2),
        collision_delta_v1+ = y1' - (m1*y1' + m2*y2' + m2*c*(y2'-y1'))/(m1 + m2),
        collision_delta_v2+ = y2' - (m1*y1' + m2*y2' + m1*c*(y1'-y2'))/(m1 + m2),
        state+ ="8-Post-Collision",
        x1' = 0, 
        x2' = 0
    | "8-Post-Collision" ->
        x1'' = 0,
        if y1'>0 then y1'' = pcb else y1' = 0,
        x2' = 0, y2' = 0 ],
    simulator.endTime+ = 15,
    simulator.timeStep+ = 0.05
