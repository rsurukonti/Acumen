// Braking or Collision - collision case
// Authors: Walid Taha and Henrik Eriksson
// 2014/09/12

model Main(simulator) =
initially
  // Car 1 parameters
  m1 = 6, x1 = 0, x1' = 11, x1'' =0,
  pbd1 = 6,  // Pre-Brake distance
  pba1 = -3, // Pre-Brake acceleration
  fbd1 = 3,  // Full Brake distance
  fba1 = -6, // Pre-Brake acceleration
  b1 = -3,   // Braking deceleration
  collision_delta_v1 =0,
  // Car 2 parameters
  m2 = 1, x2 =20, x2' = 3, x2'' =0 ,
  collision_delta_v2 =0,
  // Joint parameters
  distance = 0,
  c  = 0.1,  // Coeff. of restitution
  pcb = -20, // Post-collision breaking
  state = "Approach", // {Approach, Pre-Brake, Brake, Collision, Post-Collision}
  print = 1
always
  distance = x2-x1,
  match state with [ 
    "Approach" -> 
	  print = 1,
      x1'' = 0,
      x2'' = 0,
      // Collision Detection
      if x1>x2 then state+ = "Collision" noelse,
      // Activating Pre-braking
      if x1+pbd1>x2 then state+ = "Pre-Brake" noelse,
      // Activating Full Breaking
      if x1+fbd1>x2 then state+ = "Brake" noelse
  | "Pre-Brake" -> 
      print = 2,
      if x1'>0 then x1'' = pba1 else x1' = 0,
      x2'' = 0,
      // Collision Detection
      if x1>x2 then state+ = "Collision" noelse,
      // De-activating Pre-braking
//     if x1+pbd1<x2 then state+ = "Approach" noelse,
      // Activating Full Breaking
      if x1+fbd1>x2 then state+ = "Brake" noelse
  | "Brake" -> 
      print = 3,
      if x1'>0 then x1'' = fba1 else x1' = 0,
      x2'' = 0,
      // Collision Detection
      if x1>x2 then state+ = "Collision" noelse,
      // De-Activating Pre-braking
      if x1+pbd1<x2 then state+ = "Approach" noelse
      // De-activating Full Breaking
//     if x1+fbd1<x2 state+ = "Pre-Brake" noelse
  | "Collision" -> 
      print = 4,
      x1'+ = (m1*x1' + m2*x2' + m2*c*(x2'-x1'))/(m1 + m2),
      x2'+ = (m1*x1' + m2*x2' + m1*c*(x1'-x2'))/(m1 + m2),
      x1'' = 0,
      x2'' = 0,
      collision_delta_v1+ = x1' - (m1*x1' + m2*x2' + m2*c*(x2'-x1'))/(m1 + m2),
      collision_delta_v2+ = x2' - (m1*x1' + m2*x2' + m1*c*(x1'-x2'))/(m1 + m2),
      state+ = "Post-Collision"
  | "Post-Collision" -> 
      print = 5,
      if x1'>0 then x1'' = pcb else x1' = 0,
      if x2'>0 then x2'' = pcb else x2' = 0 ]