// Two dimensional
// Authors: Walid Taha and Henrik Eriksson
// 2014/09/12

model Main(simulator) =
initially
  t = -2, t' = 1,
  m1 = 1, x1 = 0, x1' = 0, x1'' = 0, y1 = -10, y1' = 3, y1'' = 0,
  m2 = 2, x2 = 6, x2' = 0, y2 = 0, y2' = 0,
  state = "Approach-1",
  radius = 2,
  sensor_radius = 0.5,
  collision_radius = 0.4,
  braking_acceleration=-5,
  c = 0.5,
  collision_delta_v1 = 0,
  collision_delta_v2 = 0,
  distance = sqrt(((0-3)*(0-6))+((-10-0)*(-10-0))),
  print = 1,
  _3D = ()
always
  _3D = (Sphere                 // Type of _3D object
         center = (x2,y2,0)     // Center point in [x,y,z] form
         size = 0.05            // Radius
         color = red            // Color
         rotation = (0,0,0) ,   // Orientation,
         Sphere                 // Type of _3D object
         center = (x1,y1,0)     // Center point in [x,y,z] form
         size = 0.05            // Radius
         color = blue           // Color
         rotation = (0,0,0),    // Orientation]
         Cylinder               // Type of _3D object
         center = (x1,y1,0)     // Center point
         radius = sensor_radius length =0.01 // Size in [radius,length] form
         color = yellow         // Color
         rotation = (pi/2,0,0), // Orientation
         Text                   // Type of _3D object
         center = (-2.2,0,-1)   // Starting point in [x,y,z] form
         size = 0.75            // Font size
         color = yellow         // Color in red-green-blue (RGB) intensity
         rotation = (0,0,0)     // Orientation (pi/2 around x-axis)
         content = state),      // Text you wish to display
  t' = 1,
  distance = sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2))),
  match state with [ 
    "Approach-1" -> 
    print = 1,
      x1' = 0, y1' = 3,
      x2 = radius*(1-t),
      y2 = 0,
      if t>0 then state+ = "Approach-2" noelse
  | "Approach-2" -> 
      print = 2,
      x1' = 0, y1' = 3,
      x2 = radius*(1-sin(t)),
      y2 = radius*(1-cos(t)),
      if y2>radius then state+ = "Approach-3", t+ = 0 noelse
  | "Approach-3" -> 
      print = 3,
      x1' = 0, y1' = 3,
      x2 = 0,
      y2 = radius*(1+t),
      if distance<=sensor_radius then state+ = "Brake" noelse
  | "Brake" -> 
      print = 4,
      x1' = 0,
      if y1'>0 then y1'' = braking_acceleration else y1' = 0,
      x2 = 0,
      y2 = radius*(1+t),
      if distance<collision_radius then state+ = "Collision" noelse
  | "Collision" -> 
      print = 5,
      y1'+ = (m1*y1' + m2*y2' + m2*c*(y2'-y1'))/(m1 + m2),
      y2'+ = (m1*y1' + m2*y2' + m1*c*(y1'-y2'))/(m1 + m2),
      collision_delta_v1+ = y1' - (m1*y1' + m2*y2' + m2*c*(y2'-y1'))/(m1 + m2),
      collision_delta_v2+ = y2' - (m1*y1' + m2*y2' + m1*c*(y1'-y2'))/(m1 + m2),
      state+ = "Post-Collision",
      x1' = 0, 
      x2' = 0
  | "Post-Collision" -> 
      print = 6,
      x1'' = 0, y1'' = 0,
      x2' = 0, y2' = 0 ]
