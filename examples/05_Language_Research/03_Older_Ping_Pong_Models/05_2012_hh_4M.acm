// 2013 Class key feedback:
//   - Need documentation for models, and interface between
//     the player and the models.
//     - It would really help to state very clearly at the start of
//       the semester what the inputs and outputs to each player are.
//       Also to know exactly what changes from model to model.
//   - Please add the energy visualization tool.
//   - It is really confusing when the model writes variables of
//     the player.
//   - ‚ÄúThe model currently assumes too much about the player‚Äù
//   - Why does the model change between stages of the project?
//   - ‚ÄúThere are a lot of loopholes in the code‚Äù
//   - It doesn‚Äôt make sense to allow the player to set the velocity
//     in the acceleration model.  That variable looks dead when
//     you are developing the model, but it is used when there is
//     a hit.
//   - In BallActuator, the formula for computing v2 is unnecessarily
//     complicated (and becomes hard to invert)
//   - Being able to set initial values for all variables can lead
//     to unnecessary problems in debuging (such as setting a polar
//     coordinate to [0,0,0], for example)
//   - There is a problem with the conventions for bat angles
//   [Might want to finalize last model, and then work backwards
//    from that.]


// Program:   3-D ping pong (bat controlled through acceleration)
// Author :   Yingfu Zeng, Adam Duracz, Walid Taha
// Date   :   2012/02/20
// License:   BSD, GPL(V2), or other by agreement with Walid Taha
//


#semantics "2012 Reference"

class Player(n) // Based on WiffWaff's speed-control player
private
mode      := "Wait";
name      := "WiffWaff";
bounced   := false;       // Tell whether the ball bounced or not
serve := false;           // The Game class will set serve flag to true
hit   := false;           // when it's your turn
count := 0;
ballv := [0,0,0];
ballp := [0,0,0];
batp  := [1.6,0,0.2];
batv := [0,0,0];
v     := [0,0,0];         // Bat's speed
a     := [0,0,0];         // Bat's acceleration (computed by controller)
estimatedBatV  := [0,0,0]; // Predicted result of acceleration
estimatedBatV' := [0,0,0]; // Equated to computed acceleration signal
desiredBatP  := [1.6*(-1)^n,0,0.2];     // Desired bat position (from derive)
desiredBatP' := [0,0,0];     // Desired bat speed (from naive)
batAngle   := [0,0,0.1];  // Normal vector of the bat's plane
batAngle'  := [0,0,0];
// Player(1) starts at [-1.6,0,0.2], Player(2) starts at [1.6,0,0.2]
startPoint := [1.6*(-1)^n,0,0.2];
v2         := [0,0,0];    // The output speed of the ball, which we desired
v21        := [0,0,0];
zz   := 0;
n1   := 0;
t   := 0;
t'  := 1;
number := n;
//
l := 0.447;l' := 0; l'' := 0;
alpha := 0.44;        alpha' := 0; alpha'' := 0;
theta := 3.1415926/2; theta' := 0; theta'' := 0;
x := 1.6*(-1)^n; x' := 0; x'' := 0;
y := 0;    y' := 0; y'' := 0;
z := 0.2;  z' := 0; z'' :=0;
x1 := 1.6*(-1)^n; x1' := 0; x1'' := 0;
y1 := 0;    y1' := 0; y1'' := 0;
z1 := 0.2;  z1' := 0; z1'' :=0;
polar := [0,0,0];
end
number = n;
startPoint = [1.6*(-1)^number,0,0.2];
if mode <> "Wait"&& mode <> "Prepare"&& mode <> "Hit"&& mode <> "Restart"
mode := "Panic!";
end;
t'  = 1;
switch mode
case "Wait"               // While waiting, moving the bat to starting point
count      := 0;

if n = 1
v         = 1.5* (startPoint-batp);
else
v         =1.5* (startPoint-batp);
end;
batAngle' = [0,0,0]-batAngle;
hit    := false;
if serve = true
mode    := "Prepare";
bounced := false;
end;

case "Prepare"

// Prepare to hit the ball
if bounced = true        // After the ball has bounced,
// start moving the bat towards the ball
v = (ballp-batp).*[0,30,0] + (ballp-batp).*[0,0,25] +
(ballp-batp).*[25,0,0];
if norm(batp - ballp)<0.15
count := count+1;
mode  := "Hit";
end;
else
desiredBatP = startPoint;
desiredBatP' = [0,0,0];
v         = 1*(startPoint-batp);
end;
// When the ball has bounced and it is at the highest position
// if count > 0&& dot(ballv,[0,0,1]) < 0.1&& bounced = true
// mode := "Hit";     // This player decide to hit.
// end;
if dot(ballp,[0,0,1]) < 0&& bounced = false
 if n = 2&& dot(ballp,[1,0,0]) > 0 
   bounced := true;
 end;
 if n = 1&& dot(ballp,[1,0,0]) < 0 
   bounced := true;
 end;
 
end;
if(serve <> true)
mode := "Wait";
end;
case "Hit"           // Decide how you want hit the ball,
if n = 2
// TODO: Introduce "Let"
   v := ballv - [4,0,((norm(([-(dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2))) - dot(( (([-(dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)) / (norm(([-(dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)))), [1,0,0])*4) / dot(( (([-(dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)) / (norm(([-(dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)))), [0,0,1])];
   batAngle := (([-(dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)) / (norm(([-(dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)));
  else
   v := ballv - [4,0,((norm(([(-dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2))) - dot(( (([(-dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)) / (norm(([(-dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)))), [1,0,0])*4) / dot(( (([(-dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)) / (norm(([(-dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)))), [0,0,1])];
   batAngle := (([(-dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)) / (norm(([(-dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)));
  end;
serve  := false;
hit    := true;
mode   := "Wait";
desiredBatP := startPoint;
if n = 1
estimatedBatV := v - [0,0,10];
else
estimatedBatV := v ;
end;


case "Panic!"
end;

// Compute the desired position based on the computed "control" speed
desiredBatP' = v;


// Basic controller to actuate acceleration
a = 13*(desiredBatP'-batv)+ 50*(desiredBatP-batp);


// Keep track of effect of acceleration to estimate actual bat speed
estimatedBatV' = a;


x'' = dot(a, [1,0,0]);
y'' = dot(a, [0,1,0]);
z'' = dot(a, [0,0,1]);


// Fill in the correct equation for l'', theta'', alpha''.
//
// The new BatActuator class converts your [l'',theta'',alpha'']
// back into the cartesian representation [x,y,z]


 if n = 2
 l''     = ((x'^2 + x''*(x-2 ) + y'^2 + y'' * y + z'^2 + z'' * z)*l  - l' * ((x-2 ) * x' + y*y' + z*z'))/ l^2;
 alpha'' = ((z''*l - l''*z) * l^2 *cos(alpha) - (2*l*l'*cos(alpha) - sin(alpha)*alpha'*l^2)*(z'*l - z*l'))/ (l^2 * cos(alpha))^2;
 if l*cos(alpha) > 0
 theta'' = ((-(y''*l*cos(alpha) + (l'*cos(alpha) - sin(alpha)*alpha'*l)*y') + (l''*cos(alpha)*y + (y'*cos(alpha) - sin(alpha)*alpha'*y)*l') - ((cos(alpha)*alpha' + alpha''*sin(alpha))*l*y + (l'*y + y'*l)*sin(alpha)*alpha')
 )*((2-x)*l*cos(alpha)) - (-x'*l*cos(alpha) + (l'*cos(alpha) - sin(alpha)*alpha'*l)*(2-x))*(-y'*l*cos(alpha) + l'*cos(alpha)*y - sin(alpha)*alpha'*l*y))/((2-x)*l*cos(alpha))^2;
 else
 theta'' = ((-(y''*l*cos(alpha) + (l'*cos(alpha) - sin(alpha)*alpha'*l)*y') + (l''*cos(alpha)*y + (y'*cos(alpha) - sin(alpha)*alpha'*y)*l') - ((cos(alpha)*alpha' + alpha''*sin(alpha))*l*y + (l'*y + y'*l)*sin(alpha)*alpha')
 )*(-(2-x)*l*cos(alpha)) +(-x'*l*cos(alpha) + (l'*cos(alpha) - sin(alpha)*alpha'*l)*(2-x))*(-y'*l*cos(alpha) + l'*cos(alpha)*y - sin(alpha)*alpha'*l*y))/((2-x)*l*cos(alpha))^2;
 end;
 
 else
 l''     = ((x'^2 + x''*(x+2 ) + y'^2 + y'' * y + z'^2 + z'' * z)*l  - l' * ((x+2 ) * x' + y*y' + z*z'))/ l^2;
 alpha'' = ((z''*l - l''*z) * l^2 *cos(alpha) - (2*l*l'*cos(alpha) - sin(alpha)*alpha'*l^2)*(z'*l - z*l'))/ (l^2 * cos(alpha))^2;
 if cos(alpha) > 0
 theta'' = ((-(y''*l*cos(alpha) + (l'*cos(alpha) - sin(alpha)*alpha'*l)*y') + (l''*cos(alpha)*y + (y'*cos(alpha) - sin(alpha)*alpha'*y)*l') - ((cos(alpha)*alpha' + alpha''*sin(alpha))*l*y + (l'*y + y'*l)*sin(alpha)*alpha')
 )*((x+2)*l*cos(alpha)) - (x'*l*cos(alpha) + (l'*cos(alpha) - sin(alpha)*alpha'*l)*(x+2))*(-y'*l*cos(alpha) + l'*cos(alpha)*y - sin(alpha)*alpha'*l*y))/((x+2)*l*cos(alpha))^2;
 else
 theta'' = ((-(y''*l*cos(alpha) + (l'*cos(alpha) - sin(alpha)*alpha'*l)*y') + (l''*cos(alpha)*y + (y'*cos(alpha) - sin(alpha)*alpha'*y)*l') - ((cos(alpha)*alpha' + alpha''*sin(alpha))*l*y + (l'*y + y'*l)*sin(alpha)*alpha')
 )*(-(x+2)*l*cos(alpha)) +(x'*l*cos(alpha) + (l'*cos(alpha) - sin(alpha)*alpha'*l)*(x+2))*(-y'*l*cos(alpha) + l'*cos(alpha)*y - sin(alpha)*alpha'*l*y))/((x+2)*l*cos(alpha))^2;
 end;
 end;
end


class BatActuator(p1)
private
p       := p1;
x1 := -1.6; x1' := 0; x1'' := 0;
y1 := 0;    y1' := 0; y1'' := 0;
z1 := 0.2;  z1' := 0; z1'' :=0;
angle := [0,0,0];
energy :=  0;
energy' := 0;
l := 0.447;l' := 0; l'' := 0;
alpha := 0.44;        alpha' := 0; alpha'' := 0;
theta := 3.1415926/2; theta' := 0; theta'' := 0;
// For visualization
mode := "Normal";
link := create cylinder([0,0,0]);
v := [0,0,0.001];
a := [0,0,0.001];
end
v = [x1',y1',z1'];
a = [x1'',y1'',z1''];
p = [x1,y1,z1];
if norm(v) > 5
x1' := dot(v/norm(v) * 5,[1,0,0]) ;
y1' := dot(v/norm(v) * 5,[0,1,0]) ;
z1' := dot(v/norm(v) * 5,[0,0,1]) ;
v := [x1',y1',z1'];
end;
if norm(a) > 100
//p'' := p''/norm(p'') * 100;
x1'' := dot(a/norm(a) * 100,[1,0,0]);
y1'' := dot(a/norm(a) * 100,[0,1,0]);
z1'' := dot(a/norm(a) * 100,[0,0,1]);
a := [x1'', y1'', z1''];
end;
link.p = [-1.6,0,0.2];
link.q = [x1,y1,z1];

switch mode
case "Normal"
// Energy function
energy' = sqrt(abs(norm(v)*norm(a)))/2;


// g function x'' :=> l''
z1'' = (l''*sin(alpha) + cos(alpha)*alpha'*l') + (-l*sin(alpha)*alpha'^2 + (alpha''* l + l'*alpha')*cos(alpha));
y1'' = ((l''*cos(alpha) - sin(alpha)*alpha'*l' - ((cos(alpha)*alpha'^2 + alpha''*sin(alpha))*l + l'*sin(alpha)*alpha'))*cos(theta)+ (-sin(theta)*theta'*(l'*cos(alpha) - sin(alpha)*alpha'*l)) -
((cos(theta)*theta'^2 + theta''*sin(theta))* l * cos(alpha) + (l'*cos(alpha) - sin(alpha)*alpha'*l)*sin(theta)*theta'));
x1'' = (l''*cos(alpha) - sin(alpha)*alpha'*l' - ((cos(alpha)*alpha'^2 + alpha''*sin(alpha))*l + l'*sin(alpha)*alpha'))*sin(theta) + (cos(theta)*theta'*(l'*cos(alpha) - sin(alpha)*alpha'*l))
+((-sin(theta)*theta'^2 + theta''*cos(theta))* l * cos(alpha) + (l'*cos(alpha) - sin(alpha)*alpha'*l)*cos(theta)*theta');
case "Rest"
v=[0,0,0];
a=[0,0,0];
case "Restart"
x1 := -1.6; x1' := 0; x1'' := 0;
y1:= 0;    y1' := 0; y1'' := 0;
z1 := 0.2;  z1' := 0; z1'' :=0;
l := 0.447;l' := 0; l'' := 0;
v := [0,0,0]; a := [0,0,0];
alpha := 0.44;        alpha' := 0; alpha'' := 0;
theta := 3.1415926/2; theta' := 0; theta'' := 0;
p       := p1;
mode := "Normal";
end;
end

class BatActuator2(p1)
private
p       := p1;
angle   := [0,0,0];
energy :=  0;
energy' := 0;
l := 0.447;l' := 0; l'' := 0;
alpha := 0.44;        alpha' := 0; alpha'' := 0;
theta := 3.1415926/2; theta' := 0; theta'' := 0;
x1 := 1.6;  x1' := 0; x1'' := 0;
y1 := 0;    y1' := 0; y1'' := 0;
z1 := 0.2;  z1' := 0; z1'' :=0;
l1 := 0.447;
v := [0,0,0.001];
a := [0,0,0.001];
mode := "Normal";
// Visualize the link
link := create cylinder([0,0,0])
end
link.p = [1.6,0,0.2];
link.q = [x1,y1,z1];

v = [x1',y1',z1'];
a = [x1'', y1'', z1''];

if norm(v) > 5
x1' := dot(v/norm(v) * 5,[1,0,0]) ;
y1' := dot(v/norm(v) * 5,[0,1,0]) ;
z1' := dot(v/norm(v) * 5,[0,0,1]) ;
v := [x1',y1',z1'];
end;
if norm(a) > 100
//p'' := p''/norm(p'') * 100;
x1'' := dot(a/norm(a) * 100,[1,0,0]);
y1'' := dot(a/norm(a) * 100,[0,1,0]);
z1'' := dot(a/norm(a) * 100,[0,0,1]);
a := [x1'', y1'', z1''];
end;


p = [x1,y1,z1];
switch mode
case "Normal"
energy' = sqrt(abs(norm(v)*norm(a)))/2;
z1'' = (l''*sin(alpha) + cos(alpha)*alpha'*l') + (-l*sin(alpha)*alpha'^2 + (alpha''* l + l'*alpha')*cos(alpha));
y1'' = ((l''*cos(alpha) - sin(alpha)*alpha'*l' - ((cos(alpha)*alpha'^2 + alpha''*sin(alpha))*l + l'*sin(alpha)*alpha'))*cos(theta)+ (-sin(theta)*theta'*(l'*cos(alpha) - sin(alpha)*alpha'*l)) -
((cos(theta)*theta'^2 + theta''*sin(theta))* l * cos(alpha) + (l'*cos(alpha) - sin(alpha)*alpha'*l)*sin(theta)*theta'));
x1'' = -1*((l''*cos(alpha) - sin(alpha)*alpha'*l' - ((cos(alpha)*alpha'^2 + alpha''*sin(alpha))*l + l'*sin(alpha)*alpha'))*sin(theta) + (cos(theta)*theta'*(l'*cos(alpha) - sin(alpha)*alpha'*l))
+((-sin(theta)*theta'^2 + theta''*cos(theta))* l * cos(alpha) + (l'*cos(alpha) - sin(alpha)*alpha'*l)*cos(theta)*theta'));
case "Restart"
x1 := 1.6; x1' := 0; x1'' := 0;
y1:= 0;    y1' := 0; y1'' := 0;
z1 := 0.2;  z1' := 0; z1'' :=0;
l := 0.447;l' := 0; l'' := 0;
alpha := 0.44;        alpha' := 0; alpha'' := 0;
theta := 3.1415926/2; theta' := 0; theta'' := 0;
p       := p1;
mode := "Normal";
case "Rest"
end;
end

class cylinder (D)
 private 
  p :=[0,0,0]; q:=[0,0,0];
  _3D := [];
  radius := 0.05;
  length := 0.01; alpha:=0; theta:= pi/2;
  x:=0;y:=0;z:=0;
  flag := 0;
 end
 if (flag = 1)
   terminate self;
 end;
 _3D = [["Cylinder",(p+q)/2+D,[radius,length],[1,1,1],
                      [alpha,0,-theta]]];
 x = dot(p-q,[1,0,0]);
 y = dot(p-q,[0,1,0]);
 z = dot(p-q,[0,0,1]);

  length = norm(p-q);
  alpha = asin(z/length);

  if (y>0)
   theta = asin(x/(length*cos(alpha)))
  else
   theta = -asin(x/(length*cos(alpha)))
              +pi
  end
end
class Ball ()
private
mode := "Fly";
k_z  := [1,1,-0.99];       // Coefficient of restitution
k2   := 1/6;               // Coefficient of the air resistance
p    := [0,0,0.5];         // Position of the ball
p'   := [5,1,-3];
p''  := [0,0,0];
_3D  := ["Sphere",[0,0,0.5],0.03,[1,1,1],[0,0,0]];
end
// Valid modes
if mode <> "Fly"&& mode <> "Bounce"&& mode <> "Freeze"
mode := "Panic!";
end;
switch mode
case "Fly"
if dot(p,[0,0,1]) < 0&& dot(p',[0,0,1])< 0
mode := "Bounce";
else
p'' = -k2 * norm(p') * p' + [0,0,-9.8];
end;
case "Bounce"
p'   :=  p' .* k_z;    // Bouncing  will lose some energy
mode := "Fly";
case "Freeze"           // The ball becomes red to show what is going wrong
p'  = [0,0,0]; p'' = [0,0,0];
case "Panic!"
end;
 if (mode = "Freeze")
    _3D = ["Sphere",p,0.03,[1,0,0],[0,0,0]];
  else
    _3D = ["Sphere",p,0.03,[1,1,1],[0,0,0]];
  end;
end
class Bat(n,p1)
private
p     := p1;
pv    := [0,0,0];
angle := [0,0,0.1];
displayAngle := [0,0,0];
mode  := "Run";
_3D   := ["Cylinder",p1,[0.15,0.01],[0.1,0.1,0.1],[0,0,0.5]];
end
switch mode
case "Run"
if n = 2
displayAngle  = [0,dot(angle,[0,0,1])*(3.14/2)/norm(angle),
dot(angle,[0,1,0])*(3.14/2)/norm(angle)]+[0,0,3.14/2];
_3D            = ["Cylinder",p,[0.15,0.001],
[0.1,0.1,0.1],displayAngle];
else
displayAngle = [dot(angle,[0,0,1])*(3.14/2),0,
dot(angle,[0,1,0])*(3.14/2)]+[0,0,3.14/2];
_3D           = ["Cylinder",p,[0.15,0.001],
[1,0.1,0.1],-1 * displayAngle];
end;
case "Rest"
pv            = [0,0,0];
_3D           = ["Box",p+[-0.05,0,0],[0.3,0.3,0.3],
[1,1,0.1],-1 * displayAngle];
end
end




class Table()   // The table
private
// Table
_3D := [["Box", [0,0,-0.05],[3,1.5,0.03],[0.1,0.1,1.0],[0,0,0]],
// TableBases 1~4
["Box", [-1.4,0.6,-0.3-0.04], [0.05,0.05,0.6], [0.8,0.8,0.8],[0,0,0]],
["Box", [-1.4,-0.6,-0.3-0.04], [0.05,0.05,0.6], [0.8,0.8,0.8],[0,0,0]],
["Box", [1.4,-0.6,-0.3-0.04], [0.05,0.05,0.6], [0.8,0.8,0.8],[0,0,0]],
["Box", [1.4,0.6,-0.3-0.04], [0.05,0.05,0.6], [0.8,0.8,0.8],[0,0,0]],
// Net
["Box", [0,0,0.125-0.02], [0.05,1.5,0.25], [0.2,0.8,0.2],[0,0,0]],
// MiddleLine
["Box", [0,0,0],[3,0.02,0.02-0.02],[1,1,1],[0,0,0]]]
end
end


class BallActuator()  // Calculate result of impact
private
mode:="Initialize";
v1 := [0,0,0];      // Input ball speed
v2 := [0,0,0];      // Output ball speed
v3 := [0,0,0];      // Bat's speed during the impact
angle := [0,0,0];   // Bat's normal vector
done  := false;
action := 0;
end
if mode <> "Initialize"&& mode <> "Calculate"&& mode <> "Wait"
mode := "Panic!";
end;
switch mode
case "Initialize"
done=false;
if action = 1
mode := "Calculate";
end;
case "Calculate"
v2     := v1-dot(2.*(v1-v3),angle)*angle;
action := 0;
if action = 0
mode := "Wait";
end;
case "Wait"
done = true;
case "Panic!"
end
end


// Sample the velocity of the ball and feed back to the players.
class BallObserver()
private
mode := "Sample";
p  := [0,0,0];
v  := [0,0,0];
pp := [0,0,0];
ap := [0,0,0];
t  := 0;
t' := 1;
end
t'=1;
if mode <> "Sample"&& mode <> "Estimate0"&& mode <> "Estimate1"
mode := "Panic!";
end;
switch mode
case "Sample"
if t > 0
pp  := p;
t   := 0;
mode:= "Estimate0"
end;
case "Estimate0"
if t = 0.01   // Calculate the average speed
ap   := p;
mode := "Estimate1";
end;
case "Estimate1"
v    := dot((ap-pp),[1,0,0])/0.01*[1,0,0]+dot((ap-pp),[0,0,1])/0.01*[0,0,1]+
dot((ap-pp),[0,1,0])/0.01*[0,1,0];
mode := "Sample";
t    := 0;
case "Panic!"
end
end


class Referee()  // This class will monitors the whole process of the game.
private
mode:="Initialize";
x := 0;xv := 0;
z := 0;zv := 0;
y := 0;
t := 0;t' := 1;
player1Score := 0;
player2Score := 0;
serveNumber  := 2;
lastHit      := 0;
reason       := "Nothing";
checked      := false;    // For the net checking
bounced      := false;
restart      := 0;        // Tell the Game to restart
acknowledged := 0;        // Check if the Game class has received
//  the restart signal
bounceTime   := 0;
status       := "Normal"
end
if mode <> "Initialize"&& mode <> "Player1Lost"&& mode <> "Player2Lost"
&& mode <> "SendMessage"&& status <> "Normal"&& reason <> "Nothing"
&& status <> "Report"&& reason <> "BallOutOfBoundary"
&& reason <> "BallBouncedTwice"&& reason <> "BallTouchNet"
mode := "Panic!";
end;
t'=1;
if z<0.05&& zv<0&& status = "Normal"  // Check if anyone fouls
if (abs(y)>0.78||abs(x)>1.53)&& status = "Normal"
reason     := "BallOutOfBoundary";
if bounced = false
if x>0
mode := "Player1Lost";
else
mode := "Player2Lost";
end;
else
if bounced = "YesIn2"    // The ball has bounced in player2's court,
mode := "Player2Lost"     // and out of boundary now, so player2 lose.
end;
if bounced = "YesIn1"
mode := "Player1Lost";
end;
end;
status := "Report";
end;
if(abs(y)<0.78&& abs(x)<1.53)&& bounced <> false
&& t>(bounceTime+0.1)&& status="Normal"
// The ball has bounced twice in player2's court
if bounced = "YesIn2"&& x > 0
mode   := "Player2Lost";
reason := "BallBouncedTwice";
bounceTime := t;
end;
// The ball has bounced twice in player1's court
if bounced = "YesIn1"&& x < 0
mode   := "Player1Lost";
reason := "BallBouncedTwice";
bounceTime := t;
end;
end;
if x<0&& x>-1.5&& bounced = false&& status == "Normal"
bounced    := "YesIn1";
bounceTime := t;
end;
if x>=0&& x<1.5&& bounced = false&& status == "Normal"
bounced    := "YesIn2";
bounceTime := t;
end;
end;








if bounced = "YesIn1"&& x>0&& status == "Normal"
bounced := false
end;
if bounced = "YesIn2"&& x<=0&& status == "Normal"
bounced := false
end;
// Time to check if the ball touches the net
if abs(x)<0.025&& t>0.1&& checked = false&& status == "Normal"
if z<0.25
if xv>0
mode   := "Player1Lost";
else
mode   := "Player2Lost"
end;
reason  := "BallTouchNet";
checked := true;
end;
end;
switch mode
case "Initialize"
case "Player1Lost"
player2Score := player2Score+1;
mode := "SendMessage";
case "Player2Lost"
player1Score := player1Score+1;
mode := "SendMessage";
case "SendMessage"
t := 0; // Wait until the Game class gets the restart signal
restart := 1;
if acknowledged = 1
mode := "Initialize";
acknowledged := 0;
restart := 0;
status  := "Normal";
checked := false;
bounced := false;
end;
case "Panic!"
end
end


/**
 * The parent of all the other classes, who controls the
 * whole process of the game.
 **/
class Game ()
private
ball    := create Ball ();
ballob  := create BallObserver();
ballActuator:= create BallActuator();
batActuator1 := create BatActuator([-1.6,0,0.2]);
batActuator2 := create BatActuator2([1.6,0,0.2]);
player1 := create Player(1);
player2 := create Player(2);
bat1    := create Bat(1,[-1.6,0,0.2]);
bat2    := create Bat(2,[1.6,0,0.2]);
table   := create Table();
referee := create Referee();
mode := "Player2Serve";       // Player2 starts first
player2Score := 0;
player1Score := 0;
serveNumber  := 2;
t  := 0;
t' := 1;
finish := false;
maxEnergy    := 360;
//maxEnergy    := 36;
diff := 0;


_3D := [["Text",[-2.8,6.5,-4],1,[0.3,0,0],[1.7,0,0],""],
["Text",[2.8,6.5,-4],1,[0.3,0.3,0.3],[1.7,0,0],""],
["Text",[-1.8,6.5,-0.5],1,[0.6,0,0],[1.7,0,0],""],
["Text",[1.8,6.5,-0.5],1,[0.1,0.1,0.1],[1.7,0,0],""]];


end


_3D = [["Text",[-2.8,6.5,-4],1,[0.9,0,0],[1.7,0,0],player1.name],
["Text",[2.8,6.5,-4],1,[0.1,0.1,0.1],[1.7,0,0],player2.name],
["Text",[-1.5,6.5,-5],1,[0.6,0,0],[1.7,0,0],player1Score],
["Text",[4.5,6.5,-5],1,[0.1,0.1,0.1],[1.7,0,0],player2Score]];
if mode <> "Restart"&& mode <> "Player1Serve"&& mode <> "Player2Serve"
&& mode <> "Impact"&& mode <> "Freeze"&& mode <> "ChangeSide"&& mode <> "Init"
&& mode <> "Act"
mode := "Panic!"
end;
t'=1;
//diff = norm(batActuator1.polar - player1.polar);
referee.x  = dot(ball.p,[1,0,0]);
referee.xv = dot(ball.p',[1,0,0]);
referee.z  = dot(ball.p,[0,0,1]);
referee.zv = dot(ball.p',[0,0,1]);
referee.y  = dot(ball.p,[0,1,0]);
referee.serveNumber = serveNumber;
player1Score  = referee.player1Score;
player2Score  = referee.player2Score;
ballob.p          = ball.p;
player1.ballp     = ballob.p;
player2.ballp     = ballob.p;
player1.ballv     = ballob.v;
player2.ballv     = ballob.v;

if bat1.mode <> "Rest"
player1.batv = batActuator1.v;
batActuator1.l'' = player1.l'';
batActuator1.theta'' = player1.theta'';
batActuator1.alpha'' = player1.alpha'';


end;
if bat2.mode <> "Rest"
player2.batv = batActuator2.v;
batActuator2.l'' = player2.l'';
batActuator2.theta'' = player2.theta'';
batActuator2.alpha'' = player2.alpha'';
end;
player1.batp  = bat1.p;
player2.batp  = bat2.p;
batActuator1.angle = player1.batAngle;
batActuator2.angle = player2.batAngle;


bat1.p  = batActuator1.p;
bat2.p  = batActuator2.p;
bat1.angle = batActuator1.angle;
bat2.angle = batActuator2.angle;
if batActuator1.energy > maxEnergy
bat1.mode = "Rest";
bat1.pv   = [0,0,0];
batActuator1.p' = [0,0,0]; // Exception
batActuator1.mode = "Rest";


end;
if batActuator2.energy > maxEnergy
bat2.mode = "Rest";
bat2.pv   = [0,0,0];
batActuator2.p' = [0,0,0]; // Exception
batActuator2.mode = "Rest";


end;
switch mode
case "Restart" // Put everything back to the starting point
ball.p            := [0,0,0.5];
ball.p'           := [5,1,-3];
bat2.p            := [1.6,0,0.2];
player2.batp      := [1.6,0,0.2];
player2.desiredBatP := player2.batp; // New variables must also be updated
player2.a         := [0,0,0];
player2.l := 0.447;player2.l' := 0; player2.l'' := 0;
player2.alpha := 0.44;        player2.alpha' := 0; player2.alpha'' := 0;
player2.theta := 3.1415926/2; player2.theta' := 0; player2.theta'' := 0;
player2.x := 1.6; player2.x' := 0; player2.x'' := 0;
player2.y := 0;    player2.y' := 0; player2.y'' := 0;
player2.z := 0.2;  player2.z' := 0; player2.z'' :=0;
player2.x1 := 1.6; player2.x1' := 0; player2.x1'' := 0;
player2.y1 := 0;    player2.y1' := 0; player2.y1'' := 0;
player2.z1 := 0.2;  player2.z1' := 0; player2.z1'' :=0;
player2.estimatedBatV  := [0,0,0];
player2.v         := [0,0,0];
player2.batAngle  := [0.01,0,0];
player2.bounced   := false;
player2.ballp     := [1.6,0,0.2];
bat1.p            := [-1.6,0,0.2];
player1.batp      := [-1.6,0,0.2];
player1.v         := [0,0,0];
batActuator1.mode := "Restart";
batActuator2.mode := "Restart";
player1.l := 0.447;player1.l' := 0; player1.l'' := 0;
player1.alpha := 0.44;        player1.alpha' := 0; player1.alpha'' := 0;
player1.theta := 3.1415926/2; player1.theta' := 0; player1.theta'' := 0;
player1.x := -1.6; player1.x' := 0; player1.x'' := 0;
player1.y := 0;    player1.y' := 0; player1.y'' := 0;
player1.z := 0.2;  player1.z' := 0; player1.z'' :=0;
player1.x1 := -1.6; player1.x1' := 0; player1.x1'' := 0;
player1.y1 := 0;    player1.y1' := 0; player1.y1'' := 0;
player1.z1 := 0.2;  player1.z1' := 0; player1.z1'' :=0;
player1.batAngle  := [0.01,0,0];
player1.bounced   := false;
player1.batp      := [-1.6,0,0.2];
player1.desiredBatP := player1.batp; // New variables must also be updated
player1.a         := [0,0,0];
player1.estimatedBatV  := [0,0,0];
batActuator1.p    := [-1.6,0,0.2];
batActuator2.p    := [1.6,0,0.2];
serveNumber       := 2;
referee.bounced      := false;
referee.checked      := false;
referee.acknowledged := 1;
mode         := "Player2Serve";
player1.mode := "Wait";
player2.mode := "Wait";
case "Player2Serve" // Player 2 is serving
   player1.serve = false;
   player2.serve = true;
   if player2.hit = true&& norm(bat2.p - ball.p) < 0.15
    ball.p'    := ball.p' -dot(2.*(ball.p'- player2.v),player2.batAngle)*player2.batAngle;
    mode       := "ChangeSide";
   end;
   if referee.restart = 1
    mode := "Freeze";
    t    := 0;
   end;
 case "Player1Serve" // Player 1 is serving
  player2.serve = false;
  player1.serve = true;
  if player1.hit = true&& norm(bat1.p - ball.p) < 0.15
   ball.p'    := ball.p' -dot(2.*(ball.p'-player1.v),player1.batAngle)*player1.batAngle;
   mode          := "ChangeSide";
  end;
  if referee.restart = 1
   mode := "Freeze";
   t    := 0;
  end;

case "ChangeSide" // Change the serve number
if referee.restart = 1
mode := "Freeze";
t    := 0;
end;
if serveNumber = 2&& referee.restart <> 1
serveNumber     := 1;
mode            := "Player1Serve";
player2.mode    := "Wait";
player2.bounced := false;
end;
if serveNumber = 1&& referee.restart <> 1
serveNumber     := 2;
mode            := "Player2Serve";
player1.mode    := "Wait";
player1.bounced := false;
end;
// When someone fouls, showing what's going wrong for 1 second
case "Freeze"
if t < 1
ball.mode := "Freeze";
batActuator1.mode := "Rest";
batActuator2.mode := "Rest";
else
mode      := "Restart";
ball.mode := "Fly";
end;
case "Panic!"
end
end


class Main(simulator)
private
mode := "Initialize";
end


switch mode
case "Initialize"
simulator.timeStep := 0.005;
simulator.endTime := 15;
create Game();
mode := "Round1";
case  "Round1"


end
end
