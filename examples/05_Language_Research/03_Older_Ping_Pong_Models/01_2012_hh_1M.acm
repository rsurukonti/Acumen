// Model   :  2012_hh_1M.acm.  Practice game (3-D Ping Pong( 
// Author  :  Yingfu Zeng, Walid Taha
// Date    :  2012/02/11
// Revision:  2013/02/06 New syntax for assignments (= and :=)
// Ideas   :  Bat has no mass.  Focus is on: Impact,  
//             problem decomposition, and systems modeling
// License:   BSD, GPL(V2), or other by agreement with Walid Taha

#semantics "2012 Reference"

class Ball ()
 private
  mode := "Fly";
  k_z  := [1,1,-0.99];       // Coefficient of restitution
  k2   := 1/6;               // Coefficient of the air resistance
  p    := [0,0,0.5];         // Position of the ball
  p'   := [5,1,-3];
  p''  := [0,0,0];
  _3D  := ["Sphere",[0,0,0.5],0.03,[1,1,1],[0,0,0]];
 end
 
 // If mode is not valid then make mode "Panic!"
 if mode <> "Fly"&& mode <> "Bounce"&& mode <> "Freeze"
   mode := "Panic!";
 end;
 // Behavior of ball in different modes
 switch mode
  case "Fly"
   if dot(p,[0,0,1]) < 0&& dot(p',[0,0,1])< 0
    mode := "Bounce";
   else // Acceleration is air resistance and gravity
    p'' = -k2 * norm(p') * p' + [0,0,-9.8];
   end;
  case "Bounce"
    p'   :=  p' .* k_z; // Bounce losing k_z energy
    mode := "Fly";
  case "Freeze"       // The ball becomes red and freezes for a bit
    p'  := [0,0,0]; p'' := [0,0,0];
  case "Panic!"
  end;
  if (mode = "Freeze")
    _3D = ["Sphere",p,0.03,[1,0,0],[0,0,0]];
  else
    _3D = ["Sphere",p,0.03,[1,1,1],[0,0,0]];
  end;
end


class BatActuator(p1)
 private
  p       := p1;
  p'      := [0,0,0];
  angle   := [0,0,0];
  energy  := 0;
  energy' := 0;
 end
  if norm(p') > 5 // ???Saturate??? speeds over 5
   p' := p'/norm(p') * 5 ;
  end;
  energy' = norm(p'); // Simplistic model of power consumed
end


class Bat(n,p1)
 private
  p     := p1;
  pv    := [0,0,0];
  angle := [0,0,0.1];
  displayAngle := [0,0,0];
  mode  := "Run";
  _3D   := ["Cylinder",p1,[0.15,0.05],[0.1,0.1,0.1],[0,0,0.5]];
 end
 switch mode
   case "Run"
     if n = 2
       displayAngle  
       = [0,dot(angle,[0,0,1])*(3.14/2)/norm(angle),
            dot(angle,[0,1,0])*(3.14/2)/norm(angle)]+[0,0,3.14/2];
       _3D = ["Cylinder",p+[0.05,0,0],[0.15,0.05],
                [0.1,0.1,0.1],displayAngle];
     else
       displayAngle 
       = [dot(angle,[0,0,1])*(3.14/2),0,
            dot(angle,[0,1,0])*(3.14/2)]+[0,0,3.14/2];
       _3D = ["Cylinder",p+[-0.05,0,0],[0.15,0.05],
                [1,0.1,0.1],-1 * displayAngle];
     end;
   case "Rest"
       pv := [0,0,0]; // Set speed to 0 in ???Rest??? mode
       _3D = ["Box",p+[-0.05,0,0],[0.3,0.3,0.3],
                [1,1,0.1],-1 * displayAngle];
   end
 end




/*
 Position and velocity of ball(ballp,ballv) always provide estimate;
 Once player decides to hit the ball, change the hit variable to
 true, the Game class will notice and calculate the output velocity 
 of the ball.
*/


class Player(n)
 private
  name := "WiffWaff";
  mode      := "Wait";   // Initial mode is to ???Wait???
  bounced   := false;    // Has the ball bounced?
  serve := false;        // Your turn to serve?  (set by Parent)
  hit   := false;        // Set this to true to hit the ball
  count := 0;            // Bounce count
  ballv := [0,0,0];      // Ball velocity (set by Parent)
  ballp := [0,0,0];      // Ball position (set by Parent)
  batp  := [1.6,0,0.2];  // Bat  position
  v     := [0,0,0];      // Bat velocity
  batAngle   := [0,0,0.1];  // Normal vector of the bat's plane
  batAngle'  := [0,0,0];
  // Player(1) startPoint is [-1.6,0,0.2] and
  // Player(2) startPoint is [1.6,0,0.2]
  startPoint := [1.6*(-1)^n,0,0.2];
  t   := 0;
  t'  := 1;
 end
 if mode <> "Wait"&& mode <> "Prepare"&& mode <> "Hit"
   mode := "Panic!";
 end;
 t'  = 1;   // Rate for local timer
 switch mode
  case "Wait" // When waiting, moving the bat to start point
   count := 0;
   if n = 1  // Done differently depending on player
     v         = startPoint - batp;
   else
     v         = startPoint + [0,0.75,0] - batp;
   end;
   batAngle' = [0,0,0] - batAngle; // Readjust bat angle
   hit    := false;
   if serve = true // Wait until Parent says serve
    mode    := "Prepare";
    bounced := false;
   else
    mode := "Wait";
   end;
  case "Prepare"          // Prepare to hit the ball
   if bounced = true     // Once ball bounces, move towards it
     v = (ballp-batp).*[0,20,0] + (ballp-batp).*[0,0,25] +
           (ballp+[0.12*(-1)^n,0,0]-batp).*[25,0,0];
     if norm(batp - ballp)<0.15&& abs(dot(ballp,[1,0,0])) >=
                               abs(dot(startPoint,[1,0,0]))
      count := count+1;
      mode  := "Hit";
     end;
   end;
   // When the ball has bounced and it is at the highest position
   if count > 0&& dot(ballv,[0,0,1]) < 0.1&& bounced = true
    mode := "Hit"; // Means this play has decided to hit the ball
   end;
   // Bouncing condition
   if dot(ballp,[0,0,1]) < 0&& bounced = false
    bounced := true;
   end;
   // Go back to waiting when it is no longer your serve
   if(serve <> true)
     mode := "Wait";
   end;
 case "Hit"           // This player???s hitting strategy
  if n = 2
   if(t<1||t>5)       // you may want to check the formulas
                      // in the BallActuator() class (Yingfu)
    v        := [-1.38,0.40,1.2];
    batAngle := [0.9471,0.25,-0.2];
   else
    if t > 4&& t < 5
     v        := [-0.88,-0.5,0.2];
     batAngle := [0.9471,0.25,-0.2];
 else
     v        := [-1.7,-0.2,3.86];
     batAngle := [0.96,-0.1,-0.2258];
 end;
   end;
  else
   if(dot(ballv,[0,1,0]) < 0)
    v        := [0.1,-0.15,3.85];
    batAngle := [-0.938,-0.162,-0.29];
   else
    v        := [1,0,2.85];
    batAngle := [-0.938,0.202,-0.29];
    end;
   end;
  serve  := false;
  hit    := true;
  mode   := "Wait";
 case "Panic!"
 end
end


class Table()   // The table (a static 3D object)
 private
        // Board
 _3D := [["Box", [0,0,-0.05],[3,1.5,0.03],[0.1,0.1,1.0],[0,0,0]],
        // TableBases 1~4
        ["Box", [-1.4,0.6,-0.3-0.04], [0.05,0.05,0.6],
                [0.8,0.8,0.8],[0,0,0]],
        ["Box", [-1.4,-0.6,-0.3-0.04], [0.05,0.05,0.6],
                [0.8,0.8,0.8],[0,0,0]],
        ["Box", [1.4,-0.6,-0.3-0.04], [0.05,0.05,0.6], 
                [0.8,0.8,0.8],[0,0,0]],
        ["Box", [1.4,0.6,-0.3-0.04], [0.05,0.05,0.6], 
                [0.8,0.8,0.8],[0,0,0]],
        // Net
        ["Box", [0,0,0.125-0.02], [0.05,1.5,0.25],
                [0.2,0.8,0.2],[0,0,0]],
        // MiddleLine
        ["Box", [0,0,0],[3,0.02,0.02-0.02],[1,1,1],[0,0,0]]]
 end
end

// Models player???s imperfect ability to observe ball
class BallObserver()
 private
  mode := "Sample";
  p  := [0,0,0];  // Ball position (set by Parent)
  v  := [0,0,0];  // Ball velocity (estimated here)
  pp := [0,0,0];
  ap := [0,0,0];
  t  := 0;
  t' := 1;
 end
 t'=1;
 if mode <> "Sample"&& mode <> "Estimate0"&& mode <> "Estimate1"
  mode := "Panic!";
 end;
 switch mode
   case "Sample"
    if t > 0
     pp  := p;
     t   := 0;
     mode:= "Estimate0"
    end;
   case "Estimate0"
 if t = 0.01   // Estimating average speed
     ap   := p;
     mode := "Estimate1";
    end;
   case "Estimate1"
    v    := dot((ap-pp),[1,0,0])/0.01*[1,0,0]+dot((ap-pp),
               [0,0,1])/0.01*[0,0,1]+
               dot((ap-pp),[0,1,0])/0.01*[0,1,0];
    mode := "Sample";
    t    := 0;
   case "Panic!"
  end
end


class Referee()  // This class will monitors the whole game.
 private
  mode:="Initialize";
  x := 0; xv := 0;
  z := 0.5; zv := 0;
  y := 0;
  t := 0; t' := 1;
  player1Score := 0;
  player2Score := 0;
  serveNumber  := 2;
  lastHit      := 0;
  reason       := "Nothing";
  checked      := false;    // For the net checking
  bounced      := false;
  restart      := 0;        // Tell the Game to restart
  acknowledged := 0;        // Check if the Game class has received
                           //  the restart signal
  bounceTime   := 0;
  status       := "Normal"
 end
 if mode <> "Initialize"&& mode <> "Player1Lost"&& mode <> "Player2Lost"
  && mode <> "SendMessage"&& status <> "Normal"&& reason <> "Nothing"
  && status <> "Report"&& reason <> "BallOutOfBoundary"
&& reason <> "BallBouncedTwice"&& reason <> "BallTouchNet"
  mode := "Panic!";
 end;
  t'=1;
  if z<0.05&& zv<0&& status = "Normal"  // Check if anyone fouls
   if (abs(y)>0.78||abs(x)>1.53)&& status = "Normal"
    reason     := "BallOutOfBoundary";
    if bounced = false
     if x>0
      mode := "Player1Lost";
     else
      mode := "Player2Lost";
     end;
    else
     if bounced = "YesIn2"    // The ball has bounced in player2's court,
      mode := "Player2Lost"     // and out of boundary now, so player2 lose.
     end;
     if bounced = "YesIn1"
      mode := "Player1Lost";
     end;
    end;
    status := "Report";
   end;
   if(abs(y)<0.78&& abs(x)<1.53)&& bounced <> false
    && t>(bounceTime+0.1)&& status="Normal"
 // The ball has bounced twice in player2's court
    if bounced = "YesIn2"&& x > 0
     mode   := "Player2Lost";
     reason := "BallBouncedTwice";
  bounceTime := t;
    end;
 // The ball has bounced twice in player1's court
    if bounced = "YesIn1"&& x < 0
     mode   := "Player1Lost";
     reason := "BallBouncedTwice";
  bounceTime := t;
    end;
   end;
   if x<0&& x>-1.5&& bounced = false&& status == "Normal"
    bounced    := "YesIn1";
    bounceTime := t;
   end;
   if x>=0&& x<1.5&& bounced = false&& status == "Normal"
    bounced    := "YesIn2";
    bounceTime := t;
   end;
 end;


 if bounced = "YesIn1"&& x>0&& status == "Normal"
  bounced := false
 end;
 if bounced = "YesIn2"&& x<=0&& status == "Normal"
  bounced := false
 end;
  // Time to check if the ball touches the net
 if abs(x)<0.025&& t>0.1&& checked = false&& status == "Normal"
  if z<0.25
    if xv>0
     mode   := "Player1Lost";
    else
     mode   := "Player2Lost"
    end;
    reason  := "BallTouchNet";
    checked := true;
  end;
 end;
switch mode
 case "Initialize"
 case "Player1Lost"
  player2Score := player2Score+1;
  mode := "SendMessage";
 case "Player2Lost"
  player1Score := player1Score+1;
  mode := "SendMessage";
 case "SendMessage"
  t := 0; // Wait until the Game class gets the restart signal
  restart := 1;
  if acknowledged = 1
    mode := "Initialize";
    acknowledged := 0;
    restart := 0;
    status  := "Normal";
    checked := false;
    bounced := false;
  end;
  case "Panic!"
 end
end


/**
* The parent of all the other classes, who controls the
* whole process of the game.
**/
class Game ()
 private
  player1 := create Player(1); // First Player;
  player2 := create Player(2); // Second Player;
  ball    := create Ball ();
  ballob  := create BallObserver();
  batActuator1 := create BatActuator([-1.6,0,0.2]);
  batActuator2 := create BatActuator([1.6,0,0.2]);
  bat1    := create Bat(1,[-1.6,0,0.2]);
  bat2    := create Bat(2,[1.6,0,0.2]);
  table   := create Table();
  gameMonitor := create Referee();
  mode    := "Player2Serve";       // Player2 starts first
  player2Score := 0;
  player1Score := 0;
  serveNumber  := 2;
  t  := 0;
  t' := 1;
  maxEnergy    := 18;
 _3D := [];
 end
  if mode <> "Restart"    && mode <> "Player1Serve"&& 
     mode <> "Player2Serve"&& mode <> "Impact"     && 
     mode <> "Freeze"     && mode <> "ChangeSide" && 
     mode <> "Act"
   mode := "Panic!"
  end;
  
_3D = [["Text",[-2.8,6.5,-4],1,[0.9,0,0],[1.7,0,0],player1.name],
["Text",[2.8,6.5,-4],1,[0.1,0.1,0.1],[1.7,0,0],player2.name],
["Text",[-1.5,6.5,-5],1,[0.6,0,0],[1.7,0,0],player1Score],
["Text",[4.5,6.5,-5],1,[0.1,0.1,0.1],[1.7,0,0],player2Score]];
  t'=1;
  gameMonitor.x  = dot(ball.p,[1,0,0]);
  gameMonitor.xv = dot(ball.p',[1,0,0]);
  gameMonitor.z  = dot(ball.p,[0,0,1]);
  gameMonitor.zv = dot(ball.p',[0,0,1]);
  gameMonitor.y  = dot(ball.p,[0,1,0]);
  gameMonitor.serveNumber = serveNumber;
  player1Score  = gameMonitor.player1Score;
  player2Score  = gameMonitor.player2Score;
  ballob.p          = ball.p;
  player1.ballp     = ballob.p;
  player2.ballp     = ballob.p;
  player1.ballv     = ballob.v;
  player2.ballv     = ballob.v;
  if bat1.mode <> "Rest"
   batActuator1.p' = player1.v;
  end;
  if bat2.mode <> "Rest"
   batActuator2.p' = player2.v;
  end;
  player1.batp  = bat1.p;
  player2.batp  = bat2.p;
  batActuator1.angle = player1.batAngle;
  batActuator2.angle = player2.batAngle;
  bat1.p  = batActuator1.p;
  bat1.pv = batActuator1.p';
  bat2.p  = batActuator2.p;
  bat2.pv = batActuator2.p';
  bat1.angle = batActuator1.angle;
  bat2.angle = batActuator2.angle;
  if batActuator1.energy > maxEnergy
     bat1.mode := "Rest";
     bat1.pv   := [0,0,0];
     batActuator1.p' = [0,0,0];
  end;
  if batActuator2.energy > maxEnergy
     bat2.mode := "Rest";
     bat2.pv   := [0,0,0];
     batActuator2.p' = [0,0,0];
  end;
 switch mode
  case "Restart" // Put everything back to the starting point
   ball.p            := [0,0,0.5];
   ball.p'           := [5,1,-3];
   bat2.p            := [1.6,0,0.2];
   player2.batp      := [1.6,0,0.2];
   player2.v         := [0,0,0];
   player2.batAngle  := [0.01,0,0];
   player2.bounced   := false;
   player2.ballp     := [1.6,0,0.2];
   bat1.p            := [-1.6,0,0.2];
   player1.batp      := [-1.6,0,0.2];
   player1.v         := [0,0,0];
   player1.batAngle  := [0.01,0,0];
   player1.bounced   := false;
   player1.ballp     := [-1.6,0,0.2];
   batActuator1.p    := [-1.6,0,0.2];
   batActuator2.p    := [1.6,0,0.2];
   serveNumber       := 2;
   gameMonitor.bounced      := false;
   gameMonitor.checked      := false;
   gameMonitor.acknowledged := 1;
   mode         := "Player2Serve";
   player1.mode := "Wait";
   player2.mode := "Wait";
  case "Player2Serve" // Player 2 is serving
   player1.serve = false;
   player2.serve =  true;
   if player2.hit = true&& norm(bat2.p - ball.p) < 0.15
    ball.p'    := ball.p' -dot(2.*(ball.p'-player2.v),player2.batAngle)*player2.batAngle;
    mode       := "ChangeSide";
   end;
   if gameMonitor.restart = 1
    mode := "Freeze";
    t    := 0;
   end;
 case "Player1Serve" // Player 1 is serving
  player2.serve = false;
  player1.serve = true;
  if player1.hit = true&& norm(bat1.p - ball.p) < 0.15
   ball.p'    := ball.p' -dot(2.*(ball.p'-player1.v),player1.batAngle)*player1.batAngle;
   mode          := "ChangeSide";
  end;
  if gameMonitor.restart = 1
   mode := "Freeze";
   t    := 0;
  end;
 case "ChangeSide" // Change the serve number
  if gameMonitor.restart = 1
   mode := "Freeze";
   t    := 0;
  end;
  if serveNumber = 2&& dot(ball.p,[1,0,0]) >0&& gameMonitor.restart <> 1
   serveNumber     := 1;
   mode            := "Player1Serve";
   player1.mode    := "Wait";
   player1.bounced := false;
  end;
  if serveNumber = 1&& dot(ball.p,[1,0,0]) <= 0&& gameMonitor.restart <> 1
   serveNumber     := 2;
   mode            := "Player2Serve";
   player2.mode    := "Wait";
   player2.bounced := false;
  end;
 // When someone fouls, showing what's going wrong for 1 second
 case "Freeze"
   if t<1
    ball.mode := "Freeze";
   else
    mode      := "Restart";
    ball.mode := "Fly";
   end;
 case "Panic!"
 end
end


class Main(simulator)
 private
  mode := "Initialize";
  score1 := 0;
  score2 := 0;
  game := 0;
 end
switch mode
 case "Initialize"
  simulator.endTime := 40;
  game := create Game();
  mode := "Persist";
 case   "Persist"
  score1 = game.player1Score;
  score2 = game.player2Score;
 end
end

