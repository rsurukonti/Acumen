// Model   :  2013_hh_M1.acm.  Practice game (3-D Ping Pong) 
// Author  :  Yingfu Zeng, Walid Taha, Xu Fei
// Date    :  2012/02/11
// Revision:  2013/02/06 New syntax for assignments (= and :=)
// Ideas   :  Bat has no mass.  Focus is on: Impact,  
//            problem decomposition, and systems modeling
// License:   BSD, GPL(V2), or other by agreement with Walid Taha

/**
 * A ping pong player, with number n.
 * Position and velocity of ball(p_ball,v_ball) are always provided by parent class.
 * maxA is the maximum accerlaration the actuator can handle.
 * */

/* 
   Has error with semantic 2014
   Works with semantic 2013
   Has bug with semantic 2012
*/

#semantics "2013 Reference"

class Player(n,maxA)
  private
    name      := "Player";
    mode      := "Wait";   // Initial mode is to Wait
    bounced   := false;    // Has the ball bounced?
    myServe   := false;    // Your turn to serve?  (set by Parent)
    starting  := false;    // Your turn to start the ball? (set by Parent)
    v_ball    := [0,0,0];      // Ball velocity (set by Parent)
    p_ball    := [0,0,0];      // Ball position (set by Parent)
    p_bat     := [1.6*(-1)^n,0,0.2];  // Bat  position (set by Parent)
    v         := [0,0,0];      // Bat velocity
    v'        := [0,0,0];      // Bat accerleration
    
    // The y position and velocity in z axis player can set to start the ball
    y         := (-1)^n * 0.5;
    zp        := 4;
    pH        := [0,0,0];  // Heightest point of my start ball
    
    angle_bat  := [0,0,0.001];  // Normal vector of the bat's plane
    angle_bat' := [0,0,0];
    a_desired  := [0.9471*(-1)^(n+1),0,0.4];
    v_desired  := [1.6*(1)^n,0,1.2];
       
    // local timer
    t    := 0;
    t'   := 1;
 
    // These coefficients are needed for prediction of ball movement
    // Coefficient of restitution
    k_z := [1.0, 1.0, -0.99];
    // Coeffiecent of air resistance
    k_a := -1/6;
    // Ball acceleration (predicted)
    a1_predicted  := [0.0, 0.0, -9.8];
    a2_predicted  := [0.0, 0.0, -9.8];
    // First prediction poit: time, position, speed
    // When ball hits the table
    t1_predicted  := 0;
    p1_predicted  := [0, 0, 0];
    v1_predicted  := [0, 0, 0];
 
    // Second prediction point: time, position, speed
    // The maximum point of the second parabola
    t2_predicted  := 0;
    p2_predicted  := [0, 0, 0];
    v2_predicted  := [0, 0, 0];

    doneOnce   := false;
    // Time for accelerating
    ta         := 0;
    // Time for decelerating
    td         := 0;
    // Unit vector of direction
    u          := [1,0,0];
    // Distance between goal point and batp
    d_ballBat  := 0;
    // Prediction pointers (for debugging)
    _3D := [["Sphere",[0,0,0],0.01,[200,0,0],[0,0,0]],
           ["Sphere",[0,0,0],0.01,[200,0,0],[0,0,0]]];
  end
  
  if mode <> "Wait"&& mode <> "Prepare"&& mode <> "Startball"
     mode := "Panic!";
  end;
  
  t'  = 1;   // Rate for local timer
  // pH is the hightest from my start ball(easy to calculate from y and zp)   
  pH :=  [1.5 * (-1)^n, y, let t = abs(zp/(-9.8 +  k_a*(zp)^2));
                              a = -9.8 +  k_a*(zp)^2 in 
                    zp*t + 0.5 * (a)*t^2 end];
  switch mode
    case "Wait" // Waiting for your serve, moving the bat to start point
      v'  = ([1.6*(-1)^n,0,0.2] - p_bat) * 5 + 5 * ([0,0,0]- v);
      t   := 0;
      t1_predicted  := 0;
      t2_predicted  := 0; 
      p2_predicted  := [0,0,0];
      doneOnce      := false;
      angle_bat'     = 2*([0,0,0] - angle_bat);
      if myServe = true&& starting == false
        mode := "Prepare";
      end;
      // Calculate how to get to goal point(slightly behind and below pH)
      if myServe = true&& starting == true 
        t := 0;  
        d_ballBat := norm(p_bat - pH);
        u := (pH + [0.07*(-1)^n,0,-0.1] - p_bat)/norm(pH + [0.07*(-1)^n,0,-0.1] - p_bat);
        ta := let d_ballBat = norm(p_bat - pH) in sqrt(2* (d_ballBat / 2) / maxA) end;
        mode := "Startball";
      end;
    case "Startball" // Start the ball as I wanted
        _3D := [["Sphere",p1_predicted,0.02,[200,0,0],[0,0,0]],
              ["Sphere",pH,0.02,[0,100,200],[0,0,0]]];
        
        // Path planning, first half distance fully accelerate the other 
        // half fully decelerate
        if(myServe = false)
          mode := "Wait";
        else
          if(t < ta)
            v' = maxA* u;       
            angle_bat' = (a_desired - angle_bat)/ta; 
          else if (t>=ta&& t<2*ta)
            v' = -maxA * u;
            angle_bat = a_desired; 
          else if (norm(p_ball - p_bat)>0.2)
            v' =5*([0,0,0]-v);
          // Prepare to hit the ball
          else if (norm(p_ball - p_bat)<0.2)
            v' = [-5 * (p_ball(0)),0,5];
            ta := 0;    
          end;
          end;
          end;
          end;
        end;
    case "Prepare"    // Prepare to hit the ball and do the predict
      //Do predict, and move pat towards the second predict point
      // Bouncing condition
      if (p_ball(2)) < 0&& bounced = false
        bounced := true;
      end;
      if bounced = true
        p1_predicted  = p_ball;
        v1_predicted  = v_ball;
        t1_predicted  = 0;
      else
        // Calculating first prediction point
        // Linearized air resistance
        a1_predicted = [0, 0, -9.8] + k_a * norm(v_ball) * v_ball;// acceleration of the ball
        // 1/a in z direction
        t1_predicted = (1/(a1_predicted(2))) * (-(v_ball(2))      // -v0
                       - sqrt((v_ball(2))^2 - 2*(a1_predicted(2))*(p_ball(2))));
        p1_predicted = p_ball + v_ball * t1_predicted + 0.5 * a1_predicted * (t1_predicted^2);
        v1_predicted = (v_ball + a1_predicted * t1_predicted) .* k_z;
        // Check if ball is going out of bounds
        // We can predict this before it actually happens
        // This actually can decrease power consuption in some cases.
        if t > 0.2*abs(t1_predicted)
          if (p1_predicted(0))*(-1)^n > 1.55 || (p1_predicted(0))*(-1)^n < 0   
             || abs((p1_predicted(1))) > 0.78
            mode    := "Wait";
            myServe := false;
          end;
        end;
      end;

      // Predict the goal point to prepare hit the ball(only do once per turn)
      if (t1_predicted < 0.15&& t1_predicted <> 0)&& 
         ((n=1&& (p_ball(0))<0) || (n==2&& (p_ball(0))>0))&&
         doneOnce = false
      // Calculating second prediction point
      // Linearized air resistance
      a2_predicted = [0, 0, -9.8] + k_a * norm(v1_predicted) * v1_predicted;
      t2_predicted = -(v1_predicted(2)) / (a2_predicted(2));
      p2_predicted = p1_predicted + v1_predicted * t2_predicted + 0.5 * a2_predicted * (t2_predicted^2);
      v2_predicted = p1_predicted + a2_predicted * t2_predicted;
      doneOnce := true;
      // First move back a bit
      // Save 0.05 sec for hit the ball with calculated velocity and angle
      t2_predicted := t2_predicted - 0.05;
      t  := 0;
      ta := t2_predicted/2;
      u := (p2_predicted + [0.2*(-1)^n,0,0]-p_bat)/norm(p2_predicted + [0.2*(-1)^n,0,0] - p_bat);
      d_ballBat = norm(p2_predicted + [0.2*(-1)^n,0,0] - p_bat);
      end;
      _3D := [["Sphere",p1_predicted,0.02,[200,0,0],[0,0,0]],
              ["Sphere",p2_predicted,0.02,[0,100,200],[0,0,0]]];
      
    if doneOnce = false
      v'  = ([1.6*(-1)^n,0,0.2]-p_bat) * 5 + 5 * ([0,0,0]- v);
    end;
    // Path planning, first move to p2, then wait to hit the ball
    if doneOnce = true
      ta := sqrt(2* (d_ballBat/2)/maxA);
      angle_bat' = (a_desired - angle_bat)/ta;
      if(t < ta)
        v' = maxA* u;
      else if (t>=ta&& t<2*ta)
        v' = -maxA * u;
      else if (norm(p_ball - p_bat)>0.2)
        v' =5*([0,0,0]-v);
      // Prepare to hit the ball
      else if (norm(p_ball - p_bat)<0.2)
        v' = [-30*(p_ball(0)),0,20];
        ta = 0;
      end;
      end;
      end;
      end;
    end;
     
    case "Panic!"
  end
end


/**
* Draws a cyliner between point p and q
**/

class Cylinder (D,tablerow,tablecolum)
 private 
  p   :=[0,0,0]; 
  q   :=[0,0,0];
  _3D := [];
  radius := 0.05;
  length := 0.01; alpha:=0; theta:= pi/2;
  x      := 0;    y    :=0; z    :=0;
  flag   := 0;
  color  := [1,1,1];
  shiftD := [10,5,0];          // shift distance of the ball
 end
 _3D = [["Cylinder",(p+q)/2+D+[tablerow,tablecolum,0].*shiftD,[radius,length],color,
                      [alpha,0,-theta]]];
  x = (p(0)-q(0));
  y = (p(1)-q(1));
  z = (p(2)-q(2));

  length = norm(p-q);
  if length > 0
    alpha = asin(z/length);
  else
    alpha = 0;
  end;
  if (y>0)
   theta = asin(x/(length*cos(alpha)+0.0001))
  else
   theta = -asin(x/(length*cos(alpha)+0.0001))+pi
  end
end

/**
* A three-dimentional bouncing ball model, with air resistance.
**/


class Ball (tablerow,tablecolum)
  private
    mode   := "Fly";           // always start by some player
    k_z    := [1,1,-0.99];       // Coefficient of restitution
    k2     := 1/6;               // Coefficient of the air resistance
    p      := [0,0,0.5];         // Position of the ball
    p'     := [0,0,0];
    p''    := [0,0,0];
    shiftD := [10,5,0];          // shift distance of the ball      
    _3D    := [];
  end
 
 // If mode is not valid then make mode "Panic!"
  if mode <> "Fly"&& mode <> "Bounce"&& mode <> "Freeze"
     mode := "Panic!";
  end;
 // Behavior of ball in different modes
  switch mode
    case "Fly"
      if (p(2)) < 0&& (p'(2))< 0
        mode := "Bounce";
      else // Acceleration is air resistance and gravity
        p'' = -k2 * norm(p') * p' + [0,0,-9.8];
      end;
    case "Bounce"
      p'   :=  p' .* k_z; // Bounce losing k_z energy
      mode := "Fly";
    case "Freeze"       // The ball becomes red and freezes for a bit
      p'  := [0,0,0]; 
      p'' := [0,0,0];
    case "Panic!"
  end;
  if (mode = "Freeze")
    _3D = ["Sphere",p+[tablerow,tablecolum,0].*shiftD,0.03,[1,0,0],[0,0,0]];
  else
    _3D = ["Sphere",p+[tablerow,tablecolum,0].*shiftD,0.03,[1,1,1],[0,0,0]];
  end;
end

/**
* Actorator for moving the bat, which also keeps track of the energy spent.
**/

class BatActuator(n,p1,tablerow,tablecolum,maxE)
  private
    p       := p1;
    p'      := [0,0,0];
    a       := [0,0,0];
    angle   := [0,0,0];
    energy  := 0;
    energy' := 0;
    // Mass of the bat
    m := 0.1;
    F := 0;
    mode := "Sample";
    v    := [0,0,0]; 
    // Visualize energy spent
    eb  := create Cylinder([0,0,0],tablerow,tablecolum);
    offset := 0;
    link1 := create Cylinder([0,0,0],tablerow,tablecolum);
    link2 := create Cylinder([0,0,0],tablerow,tablecolum);
    L1    := 0.4;  // Length of link1 is fixed
    baseP := [2.4*(-1)^n,0,0.3];
    unit  := [0,0,0]; // Unit vector from baseP to P
  end

  F = m * norm(a);
  if norm(p') > 5 // ???Saturate??? speeds over 5
    p' := p'/norm(p') * 5 ;
  end;
  energy' = F*norm(p'); // Simplistic model of power consumed
  switch mode
    case "Sample"
      v := p';
      mode := "Calculate";
    case "Calculate"
      a = (p' - v)/0.01;
      mode = "Sample";
  end;
  // Visualize arm
  unit = (p - baseP)/norm(p - baseP);
  link1.q = baseP;
  link1.p = baseP + L1 * unit;
  link1.radius = 0.1;
  link2.q = link1.p;
  link2.p = p +  [(-1)^n * 0.05,0,0];
  link2.radius = 0.03;
  // Energy bar visualization
  offset = (energy/maxE)*1.5;
  eb.p = [(-1)^n * 1.5, -0.8, -0.05];
  eb.q = [(-1)^n * 1.5 + (-1)^(n+1) * offset, -0.8, -0.05];
  eb.radius = 0.02;
  eb.color = [0.2,1,0.2];
end

/**
* For visualizing the bat
**/

class Bat(n,p1,tablerow,tablecolum)
  private
    p      := p1;
    pv     := [0,0,0];
    angle  := [0,0,0];
    displayAngle := [0,0,0];
    shiftD  := [10,5,0];
    unitX   := 0;
    unitY   := 0;
    unitZ   := 0;
    mode   := "Run";
    _3D    := [];
  end
  switch mode
    case "Run"
      if n = 2
        displayAngle = [(angle(2))*(pi/2),0,
                       (angle(1))*(pi/2)]+[0,0,pi/2];
        _3D = ["Cylinder",p+[0.05,0,0]+[tablerow,tablecolum,0].*shiftD,[0.15,0.05],
                [0.1,0.1,0.1],displayAngle];
      else
        displayAngle = [(-angle(2))*(pi/2),0,
                       (angle(1))*(pi/2)]+[0,0,pi/2];
        _3D = ["Cylinder",p+[-0.05,0,0]+[tablerow,tablecolum,0].*shiftD,[0.15,0.05],
                [1,0.1,0.1],displayAngle];
      end;
    case "Rest"
      pv := [0,0,0]; // Set speed to 0 in ???Rest??? mode
      _3D = ["Box",p+[-0.05,0,0]+[tablerow,tablecolum,0].*shiftD,[0.3,0.3,0.3],
                [1,1,0.1],-1 * displayAngle];
  end
end

class Table(offset,shiftD)   // The table (a static 3D object)
  private
     _3D :=[["Box", [0,0,-0.05]+offset.*shiftD,[3,1.5,0.03],[0.1,0.1,1.0],[0,0,0]],
        // TableBases 1~4
        ["Box", [-1.4,0.6,-0.3-0.04]+offset.*shiftD, [0.05,0.05,0.6],
                [0.8,0.8,0.8],[0,0,0]],
        ["Box", [-1.4,-0.6,-0.3-0.04]+offset.*shiftD, [0.05,0.05,0.6],
                [0.8,0.8,0.8],[0,0,0]],
        ["Box", [1.4,-0.6,-0.3-0.04]+offset.*shiftD, [0.05,0.05,0.6], 
                [0.8,0.8,0.8],[0,0,0]],
        ["Box", [1.4,0.6,-0.3-0.04]+offset.*shiftD, [0.05,0.05,0.6], 
                [0.8,0.8,0.8],[0,0,0]],
        // Net
        ["Box", [0,0,0.125-0.02]+offset.*shiftD, [0.05,1.5,0.25],
                [0.2,0.8,0.2],[0,0,0]],
        // MiddleLine
        ["Box", [0,0,0]+offset.*shiftD,[3,0.02,0.02-0.02],[1,1,1],[0,0,0]]];
 end;
end

/**
* Observer who estimate ball's velocity based on its positions
**/
class BallObserver()
  private
    mode := "Sample";
    p  := [0,0,0];  // Ball position (set by Parent)
    v  := [0,0,0];  // Ball velocity (estimated here)
    pp := [0,0,0];
    ap := [0,0,0];
    t  := 0;
    t' := 1;
  end
  t'=1;
  if mode <> "Sample"&& mode <> "Estimate0"&& mode <> "Estimate1"
    mode := "Panic!";
  end;
  switch mode
    case "Sample"
      if t > 0
        pp  := p;
        t   := 0;
        mode:= "Estimate0"
      end;
    case "Estimate0"
      if t = 0.01   // Estimating average speed
        ap   := p;
        mode := "Estimate1";
      end;
    case "Estimate1"
      v    := (ap(0)-pp(0))/0.01*[1,0,0]+
              (ap(2)-pp(2))/0.01*[0,0,1]+
              (ap(1)-pp(1))/0.01*[0,1,0];
      mode := "Sample";
      t    := 0;
    case "Panic!"
  end
end


// This class monitors the whole game.
class Referee() 
  private
    mode:="Initialize";
    // Position and velocity of the ball
    p := [0,0,0];p' := [0,0,0];
    t := 0;   t' := 1;
    player1Score := 0;
    player2Score := 0;
    serveNumber  := 2;
    lastHit      := 0;
    reason       := "Nothing";
    checked      := false;    // For the net checking
    bounced      := false;    
    restart      := 0;        // Tell the Game to restart
    acknowledged := 0;        // Check if the Game class has received
                              //  the restart signal
    bounceTime   := 0;
    status       := "Normal"
  end
  
  if mode <> "Initialize"&& mode <> "Player1Lost"&& mode <> "Player2Lost"
  && mode <> "SendMessage1"&& status <> "Normal"&& reason <> "Nothing"
  && status <> "Report"&& reason <> "BallOutOfBoundary"&& mode <> "SendMessage2"
  && reason <> "BallBouncedTwice"&& reason <> "BallTouchNet"&& reason <> "BallNotOverNet"

    mode := "Panic!";
  end;
  t'=1;
  // Whenever ball is about to hit the ground, check if anyone fouls(outside, fail to serve)
  if p(2)<0.05&& p'(2)<0&& status = "Normal"  
    // Ball fly outside the table case
    if (abs(p(1))>0.78||abs(p(0))>1.53)&& status = "Normal"
      reason     := "BallOutOfBoundary";
      if bounced = false
        if lastHit = 1
          mode := "Player1Lost";
        else if lastHit = 2
          mode := "Player2Lost";
        end;
      end;
      else
        if bounced = "YesIn2"      // The ball has bounced in player2's court,
          mode := "Player2Lost";    // and out of boundary now, so player2 lose.
        end;
        if bounced = "YesIn1"
          mode := "Player1Lost";
        end;
      end;
      status := "Report";
    end;
    // Fail to serve the ball back
    if (abs(p(1))<=0.78&& abs(p(0))<=1.53)&& bounced <> false 
     && status="Normal"&& abs(p(0))>0.025
      if bounced = "YesIn1"&& lastHit == 1&& p(0) < 0
        mode       := "Player1Lost";
        reason     := "BallNotOverNet";
        bounced    := true;
      end;
      if bounced = "YesIn2"&& lastHit == 2&& p(0) > 0
        mode       := "Player2Lost";
        reason     := "BallNotOverNet";
        bounced    := true;
      end;
    end;
    if(abs(p(1))<=0.78&& abs(p(0))<=1.53)&& bounced <> false
    && t>(bounceTime+0.1)&& status="Normal"
    // The ball has bounced twice in player2's court
      if bounced = "YesIn2"&& p(0) > 0&& lastHit == 1
        mode   := "Player2Lost";
        reason := "BallBouncedTwice";
        bounceTime := t;
      end;
    // The ball has bounced twice in player1's court
      if bounced = "YesIn1"&& p(0) < 0&& lastHit == 2
        mode   := "Player1Lost";
        reason := "BallBouncedTwice";
        bounceTime := t;
      end;
    end;
    if p(0)<0&& p(0)>-1.53&& bounced = false&& status == "Normal"
      bounced    := "YesIn1";
      bounceTime := t;
    end;
    if p(0)>=0&& p(0)<1.53&& bounced = false&& status == "Normal"
      bounced    := "YesIn2";
      bounceTime := t;
    end;
  end;
  if bounced = "YesIn1"&& p(0)>0&& status == "Normal"
    bounced := false
  end;
  if bounced = "YesIn2"&& p(0)<=0&& status == "Normal"
    bounced := false
  end;
  // Time to check if the ball touches the net
  if abs(p(0))<0.025&& t>0.1&& checked = false&& status == "Normal"
    if p(2)<0.25
      if p'(0)>0
        mode   := "Player1Lost";
      else
        mode   := "Player2Lost"
      end;
      reason  := "BallTouchNet";
      checked := true;
    end;
  end;
  switch mode
    // Put the intermediate variables to its iniital value
    case "Initialize"
      if acknowledged = 1
        mode := "Initialize";
        acknowledged  := 0;
        restart       := 0;
        status        := "Normal";
        checked       := false;
        bounced       := false;
      end;
    // Update the score and notify the Game class
    case "Player1Lost"
      player2Score := 1+player2Score;
      mode := "SendMessage1";
    case "Player2Lost"
      player1Score := 1+player1Score;
      mode := "SendMessage2";
    // Make sure Game class gets the message then go back to initial state
    case "SendMessage1"
      t := 0; // Wait until the Game class gets the restart signal
      if acknowledged = 1
        mode := "Initialize";
        acknowledged := 0;
        restart      := 0;
        status       := "Normal";
        checked      := false;
        bounced      := false;
      else 
        restart      := 1;
      end;
    case "SendMessage2"
      t := 0; // Wait until the Game class gets the restart signal
      if acknowledged  = 1
        mode := "Initialize";
        acknowledged := 0;
        restart      := 0;
        status       := "Normal";
        checked      := false;
        bounced      := false;
      else 
        restart      := 1;
      end;
    case "Panic!"
  end
end

/**
* The parent of all the other classes, who controls the information flow between 
* different children class and visualize the game progress.
**/
class Game (player1,player2,tablerow, tablecolum,gameLength)
  private
    player1 := create player1(1,30); // First Player;
    player2 := create player2(2,30); // Second Player;
    ball    := create Ball (tablerow, tablecolum);
    ballob  := create BallObserver();
    batActuator1 := create BatActuator(1,[-1.6,0,0.2],tablerow,tablecolum,20);
    batActuator2 := create BatActuator(2,[1.6,0,0.2],tablerow,tablecolum,20);
    bat1    := create Bat(1,[-1.6,0,0.2],tablerow, tablecolum);
    bat2    := create Bat(2,[1.6,0,0.2],tablerow, tablecolum);
    table   := create Table([tablerow, tablecolum, 0],[10,5,0]);
    gameMonitor := create Referee();
    mode         := "Init";       // Player2 starts first
    player2Score := 0;
    player1Score := 0;
    gameScore1   := 0;
    gameScore2   := 0;
    serveNumber  := 2;
    first_serve  := 2;
    finish := false;
    t  := 0;
    t' := 1;
    maxEnergy    := 20;
    shiftD       := [10,5,0];
    gameTime  := 0;            //for calculate the game length
    gameTime' := 1;
    batRadius := 0.2;
    changeServe := 1;         //for change the serve everytime
     _3D := [];
    // Return numbers 
    r1 := 0; r2 := 0;
    finalScore1 := 0;
    finalScore2 := 0;

    //******* For Debug        
    zc1 := 0;
    zc2 := 0;
    zc3 := 0;
  end
  _3D = [["Text",[-3.5,6.5,-4]+[tablerow,tablecolum,0].*shiftD,1,[0.9,0,0],[1.7,0,0],player1.name],
         ["Text",[1.5,6.5,-4]+[tablerow,tablecolum,0].*shiftD,1,[0.1,0.1,0.1],[1.7,0,0],player2.name],
         ["Text",[-1.8,6.5,-5]+[tablerow,tablecolum,0].*shiftD,1,[0.6,0,0],[1.7,0,0],player1Score],
         ["Text",[3.5,6.5,-5]+[tablerow,tablecolum,0].*shiftD,1,[0.1,0.1,0.1],[1.7,0,0],player2Score],
         ["Text",[-1.8,6.5,-6]+[tablerow,tablecolum,0].*shiftD,1,[0.6,0,0],[1.7,0,0],finalScore1],
         ["Text",[3.5,6.5,-6]+[tablerow,tablecolum,0].*shiftD,1,[0.1,0.1,0.1],[1.7,0,0],finalScore2],
         ["Text",[-1.8,6.5,1.5]+[tablerow,tablecolum,0].*shiftD,1,[0.6,0,0],[1.7,0,0],r1],
         ["Text",[3.5,6.5,1.5]+[tablerow,tablecolum,0].*shiftD,1,[0.1,0.1,0.1],[1.7,0,0],r2]];
  //add two modes for alternating start the game
  if mode <> "Restart1"    && mode <> "Player1Serve"&& mode <> "Player2Serve" 
&& mode <> "Impact"      && mode <> "Freeze"     && mode <> "ChangeSide"   
&& mode <> "Act"         && mode <> "Endgame"     && mode <> "Init"  
&& mode <> "Restart2"    && mode <> "StartBall1"
&& mode <> "StartBall2"
    mode := "Panic!"
  end;
  t'=1;
  gameTime' = 1;
  if gameTime > gameLength
    gameTime := 0;
    finish   := true;
  end;
  if finish = true
    mode := "Endgame"; 
  end;
  gameMonitor.p  = ball.p;
  gameMonitor.p' = ball.p';
  gameMonitor.serveNumber = serveNumber;
  player1Score   = gameMonitor.player1Score;
  player2Score   = gameMonitor.player2Score;
  ballob.p       = ball.p;
  player1.p_ball  = ballob.p;
  player2.p_ball  = ballob.p;
  player1.v_ball  = ballob.v;
  player2.v_ball  = ballob.v;
  if bat1.mode <> "Rest"&& gameTime <= gameLength
    batActuator1.p' = player1.v;
    batActuator1.angle = player1.angle_bat;
  end;
  if bat2.mode <> "Rest"&& gameTime <= gameLength
    batActuator2.p' = player2.v;
    batActuator2.angle = player2.angle_bat;
  end;
  player1.p_bat = bat1.p;
  player2.p_bat = bat2.p;
  bat1.p  = batActuator1.p;
  bat1.pv = batActuator1.p';
  bat2.p  = batActuator2.p;
  bat2.pv = batActuator2.p';
  bat1.angle = batActuator1.angle;
  bat2.angle = batActuator2.angle;
  if batActuator1.energy > maxEnergy
    bat1.mode      := "Rest";
    bat1.pv        := [0,0,0];
    batActuator1.p' = [0,0,0];
  end;
  if batActuator2.energy > maxEnergy
    bat2.mode      := "Rest";
    bat2.pv        := [0,0,0];
    batActuator2.p' = [0,0,0];
  end;
  switch mode
    case "Init"
      batActuator2.p := [1.6,0,0.2]; //Initialize the bat pos
      batActuator1.p := [-1.6,0,0.2];
      ball.mode      := "Fly";
      if first_serve = 1  // left serve first
        ball.p              := [-1.5,player1.y,0]; //Initialize the ball pos
        gameMonitor.lastHit := 1;
        changeServe         := 2;
        serveNumber         := 1;
        mode                := "StartBall1";
      else                // right serve first
        ball.p              := [1.5,player2.y,0]; //Initialize the ball pos
        gameMonitor.lastHit := 2;
        changeServe         := 1;
        serveNumber         := 2;
        mode                := "StartBall2";
      end;
    case "Restart1" // Put everything back to the starting point
      ball.p            := [-1.5,player1.y,0];
      ball.mode         := "Fly";
      ball.p'           := [0,0,0];
      ball.p''          := [0,0,0];
      
      player2.bounced   := false;
      player2.myServe   := false;
      player2.starting  := false;
      player2.p_bat     := [1.6,0,0.2];
      
      player1.bounced   := false;
      player1.myServe   := false;
      player1.starting  := false;
      player1.p_ball    := [-1.5,player1.y,0];
      player1.p_bat     := [-1.6,0,0.2];
      
      batActuator1.p    := [-1.6,0,0.2];
      batActuator2.p    := [1.6,0,0.2];
      batActuator1.p'   := [0,0,0];
      batActuator2.p'   := [0,0,0];
      
      serveNumber               := 1;
      gameMonitor.bounced       := false;
      gameMonitor.checked       := false;
      gameMonitor.acknowledged  := 1;
      gameMonitor.lastHit       := 1;
      changeServe               := 2;
      mode                      := "StartBall1";
    case "Restart2" // Put everything back to the starting point
      ball.p            := [1.5,player2.y,0];
      ball.mode         := "Fly";
      ball.p'           := [0,0,0];
      ball.p''          := [0,0,0];
      
      player2.bounced   := false;
      player2.myServe   := false;
      player2.starting  := false;
      player2.p_bat     := [1.6,0,0.2];
      player2.p_ball    := [1.5,player2.y,0];
      
      player1.bounced   := false;
      player1.myServe   := false;
      player1.starting  := false;
      player1.p_bat     := [-1.6,0,0.2];
      
      batActuator1.p'   := [0,0,0];
      batActuator1.p    := [-1.6,0,0.2];    
      batActuator2.p'   := [0,0,0];
      batActuator2.p    := [1.6,0,0.2];
      
      serveNumber               := 2;
      gameMonitor.bounced       := false;
      gameMonitor.checked       := false;
      gameMonitor.acknowledged  := 1;
      gameMonitor.lastHit       := 2;
      changeServe               := 1;
      mode                      := "StartBall2";     
    case "StartBall1"
      if batActuator2.energy > maxEnergy&& batActuator1.energy > maxEnergy
        mode := "Endgame";
        t    := 0;
      else if batActuator1.energy > maxEnergy&& batActuator2.energy < maxEnergy
        mode := "Restart2";
        t    := 0;
      else
        ball.p'           := [0,0,player1.zp];
        player1.myServe   := true;
        player1.starting  := true;
        mode              := "Player1Serve";
      end;
      end;
    case "StartBall2"
      if batActuator2.energy > maxEnergy&& batActuator1.energy > maxEnergy
        mode := "Endgame";
        t    := 0;
      else if batActuator2.energy > maxEnergy&& batActuator1.energy < maxEnergy
        mode := "Restart1";
        t    := 0;
      else
        ball.p'           := [0,0,player2.zp];
        player2.myServe   := true;
        player2.starting  := true;
        mode              := "Player2Serve";
      end;
      end;
    case "Player2Serve" // Player 2 is serving
      if batActuator2.energy > maxEnergy&& batActuator1.energy > maxEnergy
        mode := "Endgame";
        t    := 0;
      else
        player1.myServe  = false;
        player2.myServe  = true;
        zc1 = dot((ball.p - bat2.p), bat2.angle);
        zc2 = dot((ball.p'- bat2.pv),bat2.angle);
        zc3 = norm((ball.p - bat2.p) - dot((ball.p - bat2.p), bat2.angle)*bat2.angle);
        if dot((ball.p - bat2.p), bat2.angle) < 0&&
           dot((ball.p'- bat2.pv),bat2.angle) < 0&&
           zc3 < batRadius&&
           gameMonitor.restart <> 1
          ball.p'            := ball.p' - dot((1.5)*(ball.p'-batActuator2.p'),batActuator2.angle)*batActuator2.angle;
          player2.myServe    := false;
          player2.starting   := false;
          r2                 := r2+1;
          player2.mode       := "Wait";
          gameMonitor.lastHit:= 2;
          mode               := "ChangeSide";
        else if gameMonitor.restart = 1&& gameTime <= gameLength
          mode := "Freeze";
          player1.mode := "Wait";
          player1.myServe := false;
          player2.mode := "Wait";
          player2.myServe := false;
          t    := 0;
        end;
        end;
        if gameMonitor.acknowledged = 1
          gameMonitor.restart := 0;
        end;
      end;
    case "Player1Serve" // Player 1 is serving     
      if batActuator2.energy > maxEnergy&& batActuator1.energy > maxEnergy
        mode := "Endgame";
        t    := 0;
      else
        player2.myServe  = false;
        player1.myServe  = true;
        zc1 = dot((ball.p - bat1.p), bat1.angle);
        zc2 = dot((ball.p'- bat1.pv),bat1.angle);
        zc3 = norm((ball.p - bat1.p) - dot((ball.p - bat1.p), bat1.angle)*bat1.angle);
        if dot((ball.p - bat1.p), bat1.angle) < 0&&
           dot((ball.p'- bat1.pv),bat1.angle) < 0&&
           zc3 < batRadius&&
           gameMonitor.restart <> 1
          ball.p'            := ball.p' - dot((1.5) * (ball.p' - batActuator1.p'),batActuator1.angle) * batActuator1.angle;
          player1.myServe    := false;
          player1.mode       := "Wait";
          player1.starting   := false;
          r1                 := r1 + 1; 
          gameMonitor.lastHit:= 1;
          mode               := "ChangeSide";
        else if gameMonitor.restart = 1&& gameTime <= gameLength
          mode := "Freeze";
          player1.mode := "Wait";
          player1.myServe := false;
          player2.mode := "Wait";
          player2.myServe := false;
          t    := 0;
        end;
        end;
        if gameMonitor.acknowledged = 1
            gameMonitor.restart := 0;
        end;
      end;
    case "ChangeSide" // Change the serve number
      if gameMonitor.restart = 1&& gameTime <= gameLength
        mode := "Freeze";
        player1.mode := "Wait";
        player1.myServe := false;
        player2.mode := "Wait";
        player2.myServe := false;
        t    := 0;
      else
        if serveNumber = 2&& dot(ball.p,[1,0,0]) >0&& gameMonitor.restart <> 1
          serveNumber     := 1;
          mode            := "Player1Serve";
          //player1.mode  := "Wait";
          player1.bounced := false;
        end;
        if serveNumber = 1&& dot(ball.p,[1,0,0]) <= 0&& gameMonitor.restart <> 1
          serveNumber     := 2;
          mode            := "Player2Serve";
          //player2.mode  := "Wait";
          player2.bounced := false;
        end;
      end;
 // When someone fouls, showing what's going wrong for 1 second
    case "Freeze"
      if t<1
        ball.mode := "Freeze";
      else
        if gameTime <= gameLength
          if changeServe = 1
            mode         := "Restart1";
            player1.mode := "Wait";
            player2.mode := "Wait";
          else
            mode         := "Restart2";
            player2.mode := "Wait";
            player1.mode := "Wait";
          end;
        end;
        ball.p'  := [0,0,0];
        ball.p'' := [0,0,0];
      end;
    case "Endgame"
      ball.mode        := "Freeze";
      bat1.pv          := [0,0,0];
      batActuator1.p'  := [0,0,0];
      bat2.pv          := [0,0,0];
      batActuator2.p'  := [0,0,0];
      // Scoring function 
      //(sum(i,r_i_min * r_i_max))*s_max/min for winner/loser
      finalScore1      := (r1*r2)*player1Score;
      finalScore2      := (r1*r2)*player2Score;
    case "Panic!"
  end
end

class Main(simulator)
  private
    mode     := "Initialize";
    t        := 0;
    t'       := 1;
    j        := 0;
    players  := [Player,Player]; //Just put all the players here
  end
  t' = 1;
  switch mode
    case "Initialize"
      simulator.endTime  := 20.5;
      simulator.timeStep := 0.01;
      for   i = 0:(length(players)-1)
        for j = (i+1):(length(players)-1)
          create Game(players(i), players(j), i, j-1,20);
        end;
      end;
      mode := "Persist";
    case "Persist"
  end
end


