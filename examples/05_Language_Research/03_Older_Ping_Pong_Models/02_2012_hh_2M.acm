//
// Program:   3-D ping pong (bat controlled through acceleration)
// Author :   Yingfu Zeng, Adam Duracz, Walid Taha
// Date   :   2012/02/20
// License:   BSD, GPL(V2), or other by agreement with Walid Taha
//

#semantics "2012 Reference"
    
class Ball ()
 private
  mode := "Fly";
  k_z  := [1,1,-0.99];       // Coefficient of restitution
  k2   := 1/6;               // Coefficient of the air resistance
  p    := [0,0,0.5];         // Position of the ball
  p'   := [5,1,-3];
  p''  := [0,0,0];
  _3D  := ["Sphere",[0,0,0.5],0.03,[1,1,1],[0,0,0]];
 end
 // If mode is not valid then make mode "Panic!"
 if mode <> "Fly"&& mode <> "Bounce"&& mode <> "Freeze"
   mode := "Panic!";
 end;
 // Behavior of ball in different modes
 switch mode
  case "Fly"
   if dot(p,[0,0,1]) < 0&& dot(p',[0,0,1])< 0
    mode := "Bounce";
   else
    p'' = -k2 * norm(p') * p' + [0,0,-9.8];
   end;
  case "Bounce"
    p'   :=  p' .* k_z;    // Bounce losing k_z energy
    mode := "Fly";
  case "Freeze"         // The ball becomes red and freezes for a bit
    p'  := [0,0,0]; p'' := [0,0,0];
  case "Panic!"
  end;
  if (mode = "Freeze")
    _3D = ["Sphere",p,0.03,[1,0,0],[0,0,0]];
  else
    _3D = ["Sphere",p,0.03,[1,1,1],[0,0,0]];
  end;
end


class BatActuator(p1)   
 private
  p       := p1;
  p'      := [0,0,0];
  p''     := [0,0,0];
  angle   := [0,0,0];
  energy  := 0;
  energy' := 0;  
 end
  if norm(p') > 5
   p' := p'/norm(p') * 5 ;
  end;
  if norm(p'') > 100
   p'' := p''/norm(p'') * 100;
  end;
// Enhanced model of power consumption 
  energy' = sqrt(abs(norm(p')*norm(p'')))/2;
end


class Bat(n,p1)
 private
  p     := p1;
  pv    := [0,0,0];
  angle := [0,0,0.1];
  displayAngle := [0,0,0];
  mode  := "Run";
  _3D   := ["Cylinder",p1,[0.15,0.01],[0.1,0.1,0.1],[0,0,0.5]];
 end
 switch mode
  case "Run"
    if n = 2
      displayAngle  
      = [0,dot(angle,[0,0,1])*(3.14/2)/norm(angle),
           dot(angle,[0,1,0])*(3.14/2)/norm(angle)]+[0,0,3.14/2];
      _3D = ["Cylinder",p+[0.05,0,0],[0.15,0.01],
               [0.1,0.1,0.1],displayAngle];
    else
      displayAngle
      = [dot(angle,[0,0,1])*(3.14/2),0,
           dot(angle,[0,1,0])*(3.14/2)]+[0,0,3.14/2];
      _3D = ["Cylinder",p+[-0.05,0,0],[0.15,0.01],
               [1,0.1,0.1],-1 * displayAngle];
    end;
  case "Rest"
      pv = [0,0,0]; // Set speed to 0 in “Rest” mode
      _3D = ["Box",p+[-0.05,0,0],[0.3,0.3,0.3],
               [1,1,0.1],-1 * displayAngle];
  end
end


/*
Position and velocity of ball(ballp,ballv) always provide estimate;
Once player decides to hit the ball, change the hit variable to
true, the Game class will notice and calculate the output velocity
of the ball.
*/


class Player(n) // Based on WiffWaff's speed-control player
 private
  mode      := "Wait";      // Initial mode is to “Wait”
  bounced   := false;       // Has the ball bounced?
  serve := false;           // Your turn to serve?  (set by Parent)
  hit   := false;           // Set this to true to hit the ball
  count := 0;               // Bounce count
  ballv := [0,0,0];         // Ball velocity (set by Parent)
  ballp := [0,0,0];         // Ball position (set by Parent)
  batp  := [1.6,0,0.2];     // Bat  position
  v     := [0,0,0];         // Bat's speed
  a     := [0,0,0];         // Bat's acceleration (computed by you)
  aTemp := [0,0,0];
  estimatedBatV  := [0,0,0]; // Predicted result of acceleration
  estimatedBatV' := [0,0,0]; // Equated to computed acceleration signal
  desiredBatP  := [1.6*(-1)^n,0,0.2];  // Desired bat position (from derive)
  desiredBatP' := [0,0,0];     // Desired bat speed (from naive)
  batAngle   := [0,0,0.1];     // Normal vector of the bat's plane
  batAngle'  := [0,0,0];
  // Player(1) startPoint is [-1.6,0,0.2] and
  // Player(2) startPoint is [1.6,0,0.2]
  startPoint := [1.6*(-1)^n,0,0.2];
  v2         := [0,0,0];    // The output speed of the ball
  v21        := [0,0,0];
  z   := 0;
  n1  := 0;
  t   := 0;
  t'  := 1;
  reStart := false;
  i := [0,0,0]; i' := [0,0,0];
 end
  
 startPoint = [1.6*(-1)^n,0,0.2];
 if mode <> "Wait"&& mode <> "Prepare"&& mode <> "Hit"
   mode := "Panic!";
 end;
 t'  = 1;
 if batp = [1.6,0,0.2]
   reStart := true;
 end;
 switch mode
  case "Wait"               // While waiting, moving the bat to starting point
   count      := 0;
   if n = 1
     v         = startPoint-batp;
   else
     v         = startPoint + [0,0.75,0] - batp;
   end;
   batAngle' = [0,0,0]-batAngle;
   hit    := false;
   if serve = true
    mode    := "Prepare";
    bounced := false;
   else
    mode := "Wait";
   end;
  case "Prepare"             // Prepare to hit the ball
//   if n = 2
//   v2  = [-(dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]
//), 5 - dot(ballp,[0,0,1])];
//   v21 = (v2 - ballv) / (-2) ;
//   n1   = norm(v21);
//   batAngle = v21 / n1;
//   z = (n1- dot(batAngle, [1,0,0])*4) / dot(batAngle, [0,0,1]);
//   v = ballv - [4,0,z];
//  else
//   v2  = [(-dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]
//), 5 - dot(ballp,[0,0,1])];
//   v21 = (v2 - ballv) / (-2) ;
//   n1   =  norm(v21);
//   batAngle = v21 / n1;
//   z = (n1- dot(batAngle, [1,0,0])*4) / dot(batAngle, [0,0,1]);
//   v = ballv - [4,0,z];
//  end;
   if bounced = true&& dot(batp, [0,0,1]) > 0.1                                      
   // Once ball bounces, move towards it
     v = (ballp-batp).*[0,30,0] + (ballp-batp).*[0,0,30] +
                   (ballp-batp).*[30,0,0];
     if norm(batp - ballp)<0.15
      count := count+1;
      mode  := "Hit";
     end;
   end;
  if dot(ballp,[0,0,1]) < 0&& bounced = false
    bounced := true;
   end;
   if(serve <> true)
     mode := "Wait";
   end;
 case "Hit"           // Decide how you want hit the ball,
  if n = 2
  v := ballv - [4,0,((norm(([-(dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2))) - dot(( (([-(dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)) / (norm(([-(dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)))), [1,0,0])*4) / dot(( (([-(dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)) / (norm(([-(dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)))), [0,0,1])];
   batAngle := (([-(dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)) / (norm(([-(dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)));

  else
   v := ballv - [4,0,((norm(([(-dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2))) - dot(( (([(-dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)) / (norm(([(-dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)))), [1,0,0])*4) / dot(( (([(-dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)) / (norm(([(-dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)))), [0,0,1])];
   batAngle := (([(-dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)) / (norm(([(-dot(ballp, [1,0,0] ) + 0.65 + 0.5 ), -dot( ballp, [0,1,0]), 5 - dot(ballp,[0,0,1])] - ballv) / (-2)));
  end;
 // v := v;
 // batAngle := batAngle;
  serve  := false;
  hit    := true;
  mode   = "Wait";
  reStart := false;
  desiredBatP := startPoint;
  if n = 1
   estimatedBatV := v - [0,0,10];
  else
   estimatedBatV := v ;
  end;
 case "Panic!"
 end;
// Compute the desired position based on the computed "control" speed
 desiredBatP' = v;
// Basic controller to actuate acceleration
 i' = desiredBatP;
 aTemp = 13*(desiredBatP'-estimatedBatV)+ 50*(desiredBatP-batp) + 10*i;
 if n = 2
   if reStart = true
     a  = [0,1,0.4] .* aTemp;
   else
     a  = aTemp;
   end;
  end;
 if n = 1
    a =  13*(desiredBatP'-estimatedBatV)+ 50*(desiredBatP-batp);
   end;
 // Keep track of effect of acceleration to estimate actual bat speed
   estimatedBatV' = a;
end  


class Table()   // The table (a static 3D object)
private
       // Board
_3D := [["Box", [0,0,-0.05],[3,1.5,0.03],[0.1,0.1,1.0],[0,0,0]],
       // TableBases 1~4
       ["Box", [-1.4,0.6,-0.3-0.04], [0.05,0.05,0.6],
               [0.8,0.8,0.8],[0,0,0]],
       ["Box", [-1.4,-0.6,-0.3-0.04], [0.05,0.05,0.6],
               [0.8,0.8,0.8],[0,0,0]],
       ["Box", [1.4,-0.6,-0.3-0.04], [0.05,0.05,0.6],
               [0.8,0.8,0.8],[0,0,0]],
       ["Box", [1.4,0.6,-0.3-0.04], [0.05,0.05,0.6],
               [0.8,0.8,0.8],[0,0,0]],
       // Net
       ["Box", [0,0,0.125-0.02], [0.05,1.5,0.25],
               [0.2,0.8,0.2],[0,0,0]],
       // MiddleLine
       ["Box", [0,0,0],[3,0.02,0.02-0.02],[1,1,1],[0,0,0]]]
 end
end


class BallActuator()  // Drives ball (and models impacts)
 private
  mode := "Initialize";
  v1 := [0,0,0];      // Ball speed (set by Parent)
  v2 := [0,0,0];      // Ball speed as set by actuator
  v3 := [0,0,0];      // Bat's speed (set by Parent)
  angle := [0,0,0];   // Bat's normal vector (set by Parent)
  done  := false;     // When collision is completed
  action := 0;        // Trigger for actuation (set by Parent)
end
 if mode <> "Initialize"&& mode <> "Calculate"&& mode <> "Wait"
  mode := "Panic!";
 end;
switch mode
 case "Initialize"
  done = false;
  if action = 1
   mode := "Calculate";
  end;
case "Calculate" // Compute impact reset equation
 v2     := v1-dot(2.*(v1-v3),angle)*angle;
 action := 0;     // Reset action to 0
 if action = 0
  mode := "Wait";
 end;
case "Wait"
 done = true;
case "Panic!"
 end
end


// Sample the velocity of the ball and feed back to the players.
class BallObserver()  
 private
  mode := "Sample";
  p  := [0,0,0];
  v  := [0,0,0];
  pp := [0,0,0];
  ap := [0,0,0];
  t  := 0;
  t' := 1;
 end
 t'=1;
 if mode <> "Sample"&& mode <> "Estimate0"&& mode <> "Estimate1"
  mode := "Panic!";
 end;
 switch mode
   case "Sample"
    if t > 0
     pp  := p;
     t   := 0;
     mode:= "Estimate0"
    end;
   case "Estimate0"
 if t = 0.01   // Calculate the average speed
     ap   := p;
     mode := "Estimate1";
    end;
   case "Estimate1"
    v    := dot((ap-pp),[1,0,0])/0.01*[1,0,0]+dot((ap-pp),[0,0,1])/0.01*[0,0,1]+
        dot((ap-pp),[0,1,0])/0.01*[0,1,0];
    mode := "Sample";
    t    := 0;
   case "Panic!"
  end
end


class Referee()  // This class will monitors the whole process of the game.
 private
  mode:="Initialize";
  x := 0;xv := 0;
  z := 0;zv := 0;
  y := 0;
  t := 0;t' := 1;
  player1Score := 0;
  player2Score := 0;
  serveNumber  := 2;
  lastHit      := 0;
  reason       := "Nothing";
  checked      := false;    // For the net checking
  bounced      := false;
  restart      := 0;        // Tell the Game to restart
  acknowledged := 0;        // Check if the Game class has received 
                           //  the restart signal
  bounceTime   := 0;
  status       := "Normal"
 end
 if mode <> "Initialize"&& mode <> "Player1Lost"&& mode <> "Player2Lost" 
  && mode <> "SendMessage"&& status <> "Normal"&& reason <> "Nothing"
  && status <> "Report"&& reason <> "BallOutOfBoundary"
&& reason <> "BallBouncedTwice"&& reason <> "BallTouchNet"
  mode := "Panic!";
 end;
  t'=1;
  if z<0.05&& zv<0&& status = "Normal"  // Check if anyone fouls
   if (abs(y)>0.78||abs(x)>1.53)&& status = "Normal"
    reason     := "BallOutOfBoundary";
    if bounced = false
     if x>0
      mode := "Player1Lost";
     else
      mode := "Player2Lost";
     end;
    else
     if bounced = "YesIn2"    // The ball has bounced in player2's court, 
      mode := "Player2Lost"     // and out of boundary now, so player2 lose.
     end;
     if bounced = "YesIn1"
      mode := "Player1Lost";
     end;
    end;
    status := "Report";
   end;
   if(abs(y)<0.78&& abs(x)<1.53)&& bounced <> false  
    && t>(bounceTime+0.1)&& status="Normal"
 // The ball has bounced twice in player2's court  
    if bounced = "YesIn2"&& x > 0 
     mode   := "Player2Lost";
     reason := "BallBouncedTwice";
  bounceTime := t;
    end;
 // The ball has bounced twice in player1's court
    if bounced = "YesIn1"&& x < 0 
     mode   := "Player1Lost";
     reason := "BallBouncedTwice";
  bounceTime := t;
    end;
   end;
   if x<0&& x>-1.5&& bounced = false&& status == "Normal"
    bounced    := "YesIn1";
    bounceTime := t;
   end;
   if x>=0&& x<1.5&& bounced = false&& status == "Normal"
    bounced    := "YesIn2";
    bounceTime := t;
   end;
 end;
 if bounced = "YesIn1"&& x>0&& status == "Normal"
  bounced := false
 end;
 if bounced = "YesIn2"&& x<=0&& status == "Normal"
  bounced := false
 end;
  // Time to check if the ball touches the net
 if abs(x)<0.025&& t>0.1&& checked = false&& status == "Normal"   
  if z<0.25
    if xv>0
     mode   := "Player1Lost";
    else
     mode   := "Player2Lost"
    end;
    reason  := "BallTouchNet";
    checked := true;
  end;
 end;
switch mode
 case "Initialize"
 case "Player1Lost"
  player2Score := player2Score+1;
  mode := "SendMessage";
 case "Player2Lost"
  player1Score := player1Score+1;
  mode := "SendMessage";
 case "SendMessage"
  t := 0; // Wait until the Game class gets the restart signal
  restart := 1;
  if acknowledged = 1
    mode := "Initialize";
    acknowledged := 0;
    restart := 0;
    status  := "Normal";
    checked := false;
    bounced := false;
  end;
  case "Panic!"
 end
end


/**
* The parent of all the other classes, who controls the
* whole process of the game.
**/
class Game ( )
 private
  ball    := create Ball ();
  ballob  := create BallObserver();
  ballActuator:= create BallActuator();
  batActuator1 := create BatActuator([-1.6,0,0.2]);
  batActuator2 := create BatActuator([1.6,0,0.2]);
  player1 := create Player(1);
  player2 := create Player(2);
  bat1    := create Bat(1,[-1.6,0,0.2]);
  bat2    := create Bat(2,[1.6,0,0.2]);
  table   := create Table();
  referee := create Referee();
  mode    := "Init";       // Player2 starts first
  player2Score := 0;
  player1Score := 0;
  serveNumber  := 2;
  t  := 0;
  t' := 1;
  finish := false;
  maxEnergy := 18;
  //_3D := [["",[-2.8,6.5,-4],1,[0.3,0,0],[1.7,0,0]],
                // ["",[2.8,6.5,-4],1,[0.3,0.3,0.3],[1.7,0,0]],
                 //[0,[-1.8,6.5,-0.5],1,[0.6,0,0],[1.7,0,0]],
                 //[0,[1.8,6.5,-0.5],1,[0.1,0.1,0.1],[1.7,0,0]]] 
  
 end
 if finish = true
  for c=self.children
   terminate  c
  end;
  terminate self
 end;
 // _3D = [[player1.name,[-2.8,6.5,-4],1,[0.9,0,0],[1.7,0,0]],
        //         [player2.name,[2.8,6.5,-4],1,[0.1,0.1,0.1],[1.7,0,0]],
        //         [player1Score,[-1.5,6.5,-5],1,[0.6,0,0],[1.7,0,0]],
        //         [player2Score,[4.5,6.5,-5],1,[0.1,0.1,0.1],[1.7,0,0]]];
  if mode <> "Restart"&& mode <> "Player1Serve"&& mode <> "Player2Serve" 
&& mode <> "Impact"&& mode <> "Freeze"&& mode <> "ChangeSide"&& mode <> "Init"
&& mode <> "Act"
   mode := "Panic!"
  end;
  t'=1;
  referee.x  = dot(ball.p,[1,0,0]);
  referee.xv = dot(ball.p',[1,0,0]);
  referee.z  = dot(ball.p,[0,0,1]);
  referee.zv = dot(ball.p',[0,0,1]);
  referee.y  = dot(ball.p,[0,1,0]);
  referee.serveNumber = serveNumber;
  player1Score  = referee.player1Score;
  player2Score  = referee.player2Score;
  ballob.p          = ball.p;
  player1.ballp     = ballob.p;
  player2.ballp     = ballob.p;  
  player1.ballv     = ballob.v;
  player2.ballv     = ballob.v;
  if bat1.mode <> "Rest"
//   batActuator1.p' = player1.v;
//   if (player1.mode="Hit")
//     batActuator1.p' := player1.v
//   end;
   batActuator1.p'' = player1.a;
  end;
  if bat2.mode <> "Rest"
//   batActuator2.p' = player2.v;
//   if (player2.mode="Hit")
//     batActuator2.p' := player2.v
//   end;
  batActuator2.p'' = player2.a;
  end;
  player1.batp  = bat1.p;
  player2.batp  = bat2.p;
  batActuator1.angle = player1.batAngle;
  batActuator2.angle = player2.batAngle;
  bat1.p  = batActuator1.p;
//  bat1.p' = batActuator1.p';
  bat2.p  = batActuator2.p;
//  bat2.p' = batActuator2.p';
  bat1.angle = batActuator1.angle;
  bat2.angle = batActuator2.angle;
  if batActuator1.energy > maxEnergy
     bat1.mode := "Rest";
 bat1.pv   := [0,0,0];
 batActuator1.p' = [0,0,0]; // Exception
// batActuator1.p'' = [0,0,0];
  end;
  if batActuator2.energy > maxEnergy
     bat2.mode := "Rest";
 bat2.pv   := [0,0,0];
 batActuator2.p' = [0,0,0]; // Exception
// batActuator2.p'' = [0,0,0];
  end; 
 switch mode
  case "Init"
   player1.n :=1;
   player2.n :=2;
   mode := "Player2Serve";
  case "Restart" // Put everything back to the starting point
   ball.p            := [0,0,0.5];
   ball.p'           := [5,1,-3];
   bat2.p            := [1.6,0,0.2];
   player2.batp      := [1.6,0,0.2];
   player2.desiredBatP := player2.batp; // New variables must also be updated
   player2.a         := [0,0,0];
   player2.estimatedBatV  := [0,0,0];
   player2.v         := [0,0,0];
   player2.batAngle  := [0.01,0,0];
   player2.bounced   := false;
   player2.ballp     := [1.6,0,0.2];
   bat1.p            := [-1.6,0,0.2];
   player1.batp      := [-1.6,0,0.2];
   player1.v         := [0,0,0];
   player1.batAngle  := [0.01,0,0];
   player1.bounced   := false;
   player1.batp      := [-1.6,0,0.2];
   player1.desiredBatP := player1.batp; // New variables must also be updated
   player1.a         := [0,0,0];
   player1.estimatedBatV  := [0,0,0];
   batActuator1.p    := [-1.6,0,0.2];
   batActuator2.p    := [1.6,0,0.2];
   serveNumber       := 2;
   referee.bounced      := false;
   referee.checked      := false;
   referee.acknowledged := 1;
   mode         := "Player2Serve";
   player1.mode := "Wait";
   player2.mode := "Wait";
  case "Player2Serve" // Player 2 is serving
   player1.serve = false;
   player2.serve = true;
   if player2.hit = true&& norm(bat2.p - ball.p) < 0.15
    ball.p'    := ball.p' -dot(2.*(ball.p'- player2.v),player2.batAngle)*player2.batAngle;
    mode       := "ChangeSide";
   end;
   if referee.restart = 1
    mode := "Freeze";
    t    := 0;
   end;
 case "Player1Serve" // Player 1 is serving
  player2.serve = false;
  player1.serve = true;
  if player1.hit = true&& norm(bat1.p - ball.p) < 0.15
   ball.p'    := ball.p' -dot(2.*(ball.p'-player1.v),player1.batAngle)*player1.batAngle;
   mode          := "ChangeSide";
  end;
  if referee.restart = 1
   mode := "Freeze";
   t    := 0;
  end;
 case "ChangeSide" // Change the serve number
  if referee.restart = 1
   mode := "Freeze";
   t    := 0;
  end;
  if serveNumber = 2&& dot(ball.p,[1,0,0]) >0&& referee.restart <> 1
   serveNumber     := 1;
   mode            := "Player1Serve";
   player1.mode    := "Wait";
   player1.bounced := false;
  end;
  if serveNumber = 1&& dot(ball.p,[1,0,0]) <= 0&& referee.restart <> 1
   serveNumber     := 2;
   mode            := "Player2Serve";
   player2.mode    := "Wait";
   player2.bounced := false;
  end; 
 // When someone fouls, showing what's going wrong for 1 second
 case "Freeze"          
   if t < 1
    ball.mode := "Freeze";
   else
    mode      := "Restart";
    ball.mode := "Fly";
   end;
 case "Panic!"
 end
end


class Main(simulator)
private
 mode := "Initialize";
 score1 := 0;
 score2 := 0;
 game := 0;
end
switch mode
case "Initialize"
 simulator.endTime := 40;
 game := create Game();
 mode := "Persist";
case   "Persist"
 score1 = game.player1Score;
 score2 = game.player2Score;
end
end
