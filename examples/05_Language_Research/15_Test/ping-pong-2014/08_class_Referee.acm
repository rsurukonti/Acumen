// This class monitors the whole game.
class Referee() 
  private
    mode:="Initialize";
    // Position and velocity of the ball
    p := [0,0,0];p' := [0,0,0];
    t := 0;   t' := 1;
    player1Score := 0;
    player2Score := 0;
    serveNumber  := 2;
    lastHit      := 0;
    reason       := "Nothing";
    checked      := false;    // For the net checking
    bounced      := false;    
    restart      := 0;        // Tell the Game to restart
    acknowledged := 0;        // Check if the Game class has received
                              //  the restart signal
    bounceTime   := 0;
    status       := "Normal"
  end
  
  if mode <> "Initialize" && mode <> "Player1Lost" && mode <> "Player2Lost"
    && mode <> "SendMessage1" && status <> "Normal" && reason <> "Nothing"
    && status <> "Report" && reason <> "BallOutOfBoundary" && mode <> "SendMessage2"
    && reason <> "BallBouncedTwice" && reason <> "BallTouchNet" && reason <> "BallNotOverNet"

    mode := "Panic!";
  end;
  t'=1;
  // Whenever ball is about to hit the ground, check if anyone fouls(outside, fail to serve)
  if p(2)<0.05 && p'(2)<0 && status == "Normal"  
    // Ball fly outside the table case
    if (abs(p(1))>0.79||abs(p(0))>1.54) && status == "Normal"
      reason     := "BallOutOfBoundary";
      if bounced == false
        if lastHit == 1
          mode := "Player1Lost";
        else if lastHit == 2
          mode := "Player2Lost";
        end;
      end;
      else
        if bounced == "YesIn2"      // The ball has bounced in player2's court,
          mode := "Player2Lost";    // and out of boundary now, so player2 lose.
        end;
        if bounced == "YesIn1"
          mode := "Player1Lost";
        end;
      end;
      status := "Report";
    end;
    // Fail to serve the ball back
    if (abs(p(1))<=0.79 && abs(p(0))<=1.54) && bounced <> false 
       && status=="Normal" && abs(p(0))>0.025
      if bounced == "YesIn1" && lastHit == 1 && p(0) < 0
        mode       := "Player1Lost";
        reason     := "BallNotOverNet";
        bounced    := true;
      end;
      if bounced == "YesIn2" && lastHit == 2 && p(0) > 0
        mode       := "Player2Lost";
        reason     := "BallNotOverNet";
        bounced    := true;
      end;
    end;
    if(abs(p(1))<=0.79 && abs(p(0))<=1.54) && bounced <> false
      && t>(bounceTime+0.1) && status=="Normal"
    // The ball has bounced twice in player2's court
      if bounced == "YesIn2" && p(0) > 0 && lastHit == 1
        mode   := "Player2Lost";
        reason := "BallBouncedTwice";
        bounceTime := t;
      end;
    // The ball has bounced twice in player1's court
      if bounced == "YesIn1" && p(0) < 0 && lastHit == 2
        mode   := "Player1Lost";
        reason := "BallBouncedTwice";
        bounceTime := t;
      end;
    end;
    if p(0)<0 && p(0)>-1.54 && bounced == false && status == "Normal"
      bounced    := "YesIn1";
      bounceTime := t;
    end;
    if p(0)>=0 && p(0)<1.54 && bounced == false && status == "Normal"
      bounced    := "YesIn2";
      bounceTime := t;
    end;
  end;
  if bounced == "YesIn1" && p(0)>0 && status == "Normal"
    bounced := false
  end;
  if bounced == "YesIn2" && p(0)<=0 && status == "Normal"
    bounced := false
  end;
  // Time to check if the ball touches the net
  if abs(p(0))<0.025 && t>0.1 && checked == false && status == "Normal"
    if p(2)<0.25
      if p'(0)>0
        mode   := "Player1Lost";
      else
        mode   := "Player2Lost"
      end;
      reason  := "BallTouchNet";
      checked := true;
    end;
  end;
  switch mode
    // Put the intermediate variables to its iniital value
    case "Initialize"
      if acknowledged == 1
        mode := "Initialize";
        acknowledged  := 0;
        restart       := 0;
        status        := "Normal";
        checked       := false;
        bounced       := false;
      end;
    // Update the score and notify the Game class
    case "Player1Lost"
      player2Score := 1+player2Score;
      mode := "SendMessage1";
    case "Player2Lost"
      player1Score := 1+player1Score;
      mode := "SendMessage2";
    // Make sure Game class gets the message then go back to initial state
    case "SendMessage1"
      t := 0; // Wait until the Game class gets the restart signal
      if acknowledged == 1
        mode := "Initialize";
        acknowledged := 0;
        restart      := 0;
        status       := "Normal";
        checked      := false;
        bounced      := false;
      else 
        restart      := 1;
      end;
    case "SendMessage2"
      t := 0; // Wait until the Game class gets the restart signal
      if acknowledged  == 1
        mode := "Initialize";
        acknowledged := 0;
        restart      := 0;
        status       := "Normal";
        checked      := false;
        bounced      := false;
      else 
        restart      := 1;
      end;
    case "Panic!"
  end
end
