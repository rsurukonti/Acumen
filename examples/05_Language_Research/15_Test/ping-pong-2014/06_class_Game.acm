/**
* The parent of all the other classes, who controls the information flow between 
* different children class and visualize the game progress.
**/
class Game (player1,player2,tablerow, tablecolum,gameLength)
  private
    player1 := create player1(1,30); // First Player;
    player2 := create player2(2,30); // Second Player;
    ball    := create Ball (tablerow, tablecolum);
    ballob  := create BallObserver();
    batActuator1 := create BatActuator(1,[-1.6,0,0.2],tablerow,tablecolum,30);
    batActuator2 := create BatActuator(2,[1.6,0,0.2],tablerow,tablecolum,30);
    bat1    := create Bat(1,[-1.6,0,0.2],tablerow, tablecolum);
    bat2    := create Bat(2,[1.6,0,0.2],tablerow, tablecolum);
    table   := create Table([tablerow, tablecolum, 0],[10,5,0]);
    gameMonitor := create Referee();
    mode         := "Init";       // Player2 starts first
    player2Score := 0;
    player1Score := 0;
    gameScore1   := 0;
    gameScore2   := 0;
    serveNumber  := 2;
    first_serve  := 2;
    finish := false;
    t  := 0;
    t' := 1;
    maxEnergy    := 30;
    shiftD       := [10,5,0];
    gameTime  := 0;            //for calculate the game length
    gameTime' := 1;
    batRadius := 0.2;
    changeServe := 1;         //for change the serve everytime
     _3D := [];
    // Return numbers 
    r1 := 0; r2 := 0;
    finalScore1 := 0;
    finalScore2 := 0;

    //******* For Debug        
    zc1 := 0;
    zc2 := 0;
    zc3 := 0;
  end
  _3D = [["Text",[-3.5,6.5,-4]+[tablerow,tablecolum,0].*shiftD,1,[0.9,0,0],[1.7,0,0],player1.name],
         ["Text",[1.5,6.5,-4]+[tablerow,tablecolum,0].*shiftD,1,[0.1,0.1,0.1],[1.7,0,0],player2.name],
         ["Text",[-1.8,6.5,-5]+[tablerow,tablecolum,0].*shiftD,1,[0.6,0,0],[1.7,0,0],player1Score],
         ["Text",[3.5,6.5,-5]+[tablerow,tablecolum,0].*shiftD,1,[0.1,0.1,0.1],[1.7,0,0],player2Score],
         ["Text",[-1.8,6.5,-6]+[tablerow,tablecolum,0].*shiftD,1,[0.6,0,0],[1.7,0,0],finalScore1],
         ["Text",[3.5,6.5,-6]+[tablerow,tablecolum,0].*shiftD,1,[0.1,0.1,0.1],[1.7,0,0],finalScore2],
         ["Text",[-1.8,6.5,1.5]+[tablerow,tablecolum,0].*shiftD,1,[0.6,0,0],[1.7,0,0],r1],
         ["Text",[3.5,6.5,1.5]+[tablerow,tablecolum,0].*shiftD,1,[0.1,0.1,0.1],[1.7,0,0],r2]];
  //add two modes for alternating start the game
  if mode <> "Restart1"      && mode <> "Player1Serve"  && mode <> "Player2Serve" 
  && mode <> "Impact"        && mode <> "Freeze"       && mode <> "ChangeSide"   
  && mode <> "Act"           && mode <> "Endgame"       && mode <> "Init"  
  && mode <> "Restart2"      && mode <> "StartBall1"
  && mode <> "StartBall2"
    mode := "Panic!"
  end;
  t'=1;
  gameTime' = 1;
  if gameTime > gameLength
    gameTime := 0;
    finish   := true;
  end;
  if finish == true
    mode := "Endgame"; 
  end;
  gameMonitor.p = ball.p;
  gameMonitor.serveNumber = serveNumber;
  player1Score   = gameMonitor.player1Score;
  player2Score   = gameMonitor.player2Score;
  ballob.p       = ball.p;
  player1.p_ball  = ballob.p;
  player2.p_ball  = ballob.p;
  player1.v_ball  = ballob.v;
  player2.v_ball  = ballob.v;
  if bat1.mode <> "Rest" && gameTime <= gameLength
    batActuator1.p' = player1.v;
    batActuator1.angle = player1.angle_bat;
  end;
  if bat2.mode <> "Rest" && gameTime <= gameLength
    batActuator2.p' = player2.v;
    batActuator2.angle = player2.angle_bat;
  end;
  player1.p_bat = bat1.p;
  player2.p_bat = bat2.p;
  bat1.p  = batActuator1.p;
  bat1.pv = batActuator1.p';
  bat2.p  = batActuator2.p;
  bat2.pv = batActuator2.p';
  bat1.angle = batActuator1.angle;
  bat2.angle = batActuator2.angle;
  if batActuator1.energy > maxEnergy
    bat1.mode      := "Rest";
    bat1.pv        := [0,0,0];
    batActuator1.p' = [0,0,0];
  end;
  if batActuator2.energy > maxEnergy
    bat2.mode      := "Rest";
    bat2.pv        := [0,0,0];
    batActuator2.p' = [0,0,0];
  end;
  switch mode
    case "Init"
      batActuator2.p := [1.6,0,0.2]; //Initialize the bat pos
      batActuator1.p := [-1.6,0,0.2];
      ball.mode      := "Fly";
      if first_serve == 1  // left serve first
        ball.p              := [-1.5,player1.y,0]; //Initialize the ball pos
        gameMonitor.lastHit := 1;
        changeServe         := 2;
        serveNumber         := 1;
        mode                := "StartBall1";
      else                // right serve first
        ball.p              := [1.5,player2.y,0]; //Initialize the ball pos
        gameMonitor.lastHit := 2;
        changeServe         := 1;
        serveNumber         := 2;
        mode                := "StartBall2";
      end;
    case "Restart1" // Put everything back to the starting point
      ball.p            := [-1.5,player1.y,0];
      ball.mode         := "Fly";
      ball.p'           := [0,0,0];
      ball.p''          := [0,0,0];
      
      player2.bounced   := false;
      player2.myServe   := false;
      player2.mode      := "Wait";
      player2.starting  := false;
      player2.p_bat     := [1.6,0,0.2];
      
      player1.bounced   := false;
      player1.myServe   := false;
      player1.mode      := "Wait";
      player1.starting  := false;
      player1.p_ball    := [-1.5,player1.y,0];
      player1.p_bat     := [-1.6,0,0.2];
      
      batActuator1.p    := [-1.6,0,0.2];
      batActuator2.p    := [1.6,0,0.2];
      batActuator1.p'   := [0,0,0];
      batActuator2.p'   := [0,0,0];
      
      serveNumber               := 1;
      gameMonitor.bounced       := false;
      gameMonitor.checked       := false;
      gameMonitor.acknowledged  := 1;
      gameMonitor.lastHit       := 1;
      changeServe               := 2;
      mode                      := "StartBall1";
    case "Restart2" // Put everything back to the starting point
      ball.p            := [1.5,player2.y,0];
      ball.mode         := "Fly";
      ball.p'           := [0,0,0];
      ball.p''          := [0,0,0];
      
      player2.bounced   := false;
      player2.myServe   := false;
      player2.mode      := "Wait";
      player2.starting  := false;
      player2.p_bat     := [1.6,0,0.2];
      player2.p_ball    := [1.5,player2.y,0];
      
      player1.bounced   := false;
      player1.myServe   := false;
      player1.mode      := "Wait";
      player1.starting  := false;
      player1.p_bat     := [-1.6,0,0.2];
      
      batActuator1.p'   := [0,0,0];
      batActuator1.p    := [-1.6,0,0.2];    
      batActuator2.p'   := [0,0,0];
      batActuator2.p    := [1.6,0,0.2];
      
      serveNumber               := 2;
      gameMonitor.bounced       := false;
      gameMonitor.checked       := false;
      gameMonitor.acknowledged  := 1;
      gameMonitor.lastHit       := 2;
      changeServe               := 1;
      mode                      := "StartBall2";     
    case "StartBall1"
      if batActuator2.energy > maxEnergy && batActuator1.energy > maxEnergy
        mode := "Endgame";
        t    := 0;
      else if batActuator1.energy > maxEnergy && batActuator2.energy < maxEnergy
        mode := "Restart2";
        t    := 0;
      else
        ball.p'           := [0,0,player1.zp];
        player1.myServe   := true;
        player1.starting  := true;
        mode              := "Player1Serve";
      end;
      end;
    case "StartBall2"
      if batActuator2.energy > maxEnergy && batActuator1.energy > maxEnergy
        mode := "Endgame";
        t    := 0;
      else if batActuator2.energy > maxEnergy && batActuator1.energy < maxEnergy
        mode := "Restart1";
        t    := 0;
      else
        ball.p'           := [0,0,player2.zp];
        player2.myServe   := true;
        player2.starting  := true;
        mode              := "Player2Serve";
      end;
      end;
    case "Player2Serve" // Player 2 is serving
      if batActuator2.energy > maxEnergy && batActuator1.energy > maxEnergy
        mode := "Endgame";
        t    := 0;
      else
        zc1 = dot((ball.p - bat2.p), bat2.angle);
        zc2 = dot((ball.p'- bat2.pv),bat2.angle);
        zc3 = norm((ball.p - bat2.p) - dot((ball.p - bat2.p), bat2.angle)*bat2.angle);
        if dot((ball.p - bat2.p), bat2.angle) < 0 &&
           dot((ball.p'- bat2.pv),bat2.angle) < 0 &&
           zc3 < batRadius &&
           gameMonitor.restart <> 1
          ball.p'            := ball.p' - dot((1.5)*(ball.p'-batActuator2.p'),batActuator2.angle)*batActuator2.angle;
          player2.starting   := false;
          r2                 := r2+1;
          player2.myServe    := false;
          player2.mode       := "Wait";
          gameMonitor.lastHit:= 2;
          mode               := "ChangeSide";
        else if gameMonitor.restart == 1 && gameTime <= gameLength
          mode := "Freeze";
          t    := 0;
        end;
        end;
        if gameMonitor.acknowledged == 1
          gameMonitor.restart := 0;
        end;
      end;
    case "Player1Serve" // Player 1 is serving     
      if batActuator2.energy > maxEnergy && batActuator1.energy > maxEnergy
        mode := "Endgame";
        t    := 0;
      else
        zc1 = dot((ball.p - bat1.p), bat1.angle);
        zc2 = dot((ball.p'- bat1.pv),bat1.angle);
        zc3 = norm((ball.p - bat1.p) - dot((ball.p - bat1.p), bat1.angle)*bat1.angle);
        if dot((ball.p - bat1.p), bat1.angle) < 0 &&
           dot((ball.p'- bat1.pv),bat1.angle) < 0 &&
           zc3 < batRadius &&
           gameMonitor.restart <> 1
          ball.p'            := ball.p' - dot((1.5) * (ball.p' - batActuator1.p'),batActuator1.angle) * batActuator1.angle;
          player1.myServe    := false;
          player1.mode       := "Wait";    
          player1.starting   := false;
          r1                 := r1 + 1; 
          gameMonitor.lastHit:= 1;
          mode               := "ChangeSide";
        else if gameMonitor.restart == 1 && gameTime <= gameLength
          mode := "Freeze";
          t    := 0;
        end;
        end;
        if gameMonitor.acknowledged == 1
            gameMonitor.restart := 0;
        end;
      end;
    case "ChangeSide" // Change the serve number
      if gameMonitor.restart == 1 && gameTime <= gameLength
        mode := "Freeze";
        t    := 0;
      else
        if serveNumber == 2 && dot(ball.p,[1,0,0]) >0 && gameMonitor.restart <> 1
          serveNumber     := 1;
          mode            := "Player1Serve";
          player1.myServe := true;
          player2.myServe := false;
          player1.bounced := false;
        end;
        if serveNumber == 1 && dot(ball.p,[1,0,0]) <= 0 && gameMonitor.restart <> 1
          serveNumber     := 2;
          mode            := "Player2Serve";
          player1.myServe := false;
          player2.myServe := true;
          player2.bounced := false;
        end;
      end;
 // When someone fouls, showing what's going wrong for 1 second
    case "Freeze"
      if t<1
        ball.mode := "Freeze";
      else
        if gameTime <= gameLength
          if changeServe == 1
            mode         := "Restart1";
            player1.mode := "Wait";
            player1.myServe:= false; 
            player2.mode := "Wait";
            player2.myServe:= false;
          else
            mode         := "Restart2";
            player2.mode := "Wait";
            player2.myServe:= false;
            player1.mode := "Wait";
            player1.myServe:= false;
          end;
        end;
        ball.p'  := [0,0,0];
        ball.p'' := [0,0,0];
      end;
    case "Endgame"
      ball.mode        := "Freeze";
      bat1.pv          := [0,0,0];
      batActuator1.p'  := [0,0,0];
      bat2.pv          := [0,0,0];
      batActuator2.p'  := [0,0,0];
      // Scoring function 
      //(sum(i,r_i_min * r_i_max))*s_max/min for winner/loser
      finalScore1      := (r1*r2)*player1Score;
      finalScore2      := (r1*r2)*player2Score;
    case "Panic!"
  end
end
