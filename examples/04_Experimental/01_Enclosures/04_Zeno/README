
These exmaples illustrate how we can use an enclosure 
based solver to simulate Zeno systems. Usually getting 
good simulation results involves three steps:

  1 Simulate the model in its original formulation.
    
  2 Add knowledge about the system using invariants,
    captured by the claim clause, in order to 
    improve the size of the enclosure.
  
  3 Vary the simulator parameters to further improve 
    the size of the enclosure. At this stage the 
    enclosure can get small enough to provide a good 
    picture of how the system behaves before and after 
    the Zeno point. It is often best to vary simulator 
    parameters only in the last step because it can 
    cause the simulation times to take a lot longer.

The example models are variations of four systems.

 - A minimal Zeno system. Models demonstrate the effect 
   of adding an invariant and the localization time 
   step parameter.

   01_Zeno_Half.acm
   02_Zeno_Half_Overconstrained.acm
   03_Zeno_Half_Improved_Precision.acm
   
 - A slightly more complicated model, where imagining 
   the post-Zeno behavior is already challenging. 
   By following the procedure â€“ adding an invariant, 
   tweaking the parameters - we can see that the system 
   is not stable after Zeno.
  
   04_Zeno_Line.acm
   05_Zeno_Line_Overconstrained.acm
   06_Zeno_Line_Overconstrained_Precision.acm
   
 - A system which has stable (even convergent) post-Zeno 
   dynamics. In this case adding a simple invariant is 
   not enough to prove this, the enclosure after Zeno 
   diverges in the first model. Here, in the second 
   model, adding a helper variable and expressing an 
   invariant in terms of it gives a small enclosure 
   after Zeno.
   
   07_Two_Tanks-Overconstrained.acm
   08_Two_Tanks_Overconstrained_Helper_Variable.acm
  
 - The bouncing ball finally demonstrates the procedure 
   used for the Two Tanks model on a system with a non-
   linear ODE solution. In this case, the convergence 
   after Zeno is fast enough to be clearly visible.
  
   09_Bouncing_Ball.acm
   10_Bouncing_Ball_Overconstrained.acm
   11_Bouncing_Ball_Overconstrained_Helper_Variable.acm
